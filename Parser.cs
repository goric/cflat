// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.0
// Machine:  VOSTRO
// DateTime: 6/26/2010 10:54:22 PM
// UserName: Tim
// Input file <..\..\GeneratorInputFiles\CFlat.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LexicalAnalysis;
using AbstractSyntaxTree;
using CFlat;

namespace SyntaxAnalysis
{
internal enum Tokens {
    error=1,EOF=2,SEMI=3,RPAREN=4,LBRACE=5,RBRACE=6,
    RBRACKET=7,PBRACKET=8,DOT=9,DOTDOT=10,COMMA=11,IN=12,
    BASE=13,TINT=14,TREAL=15,TSTRING=16,TBOOL=17,TVOID=18,
    WHILE=19,FOR=20,IF=21,ELSE=22,SELF=23,CLASS=24,
    EXTENDS=25,NEW=26,RETURN=27,TRUE=28,FALSE=29,READONLY=30,
    NECESSARY=31,PRIVATE=32,PUBLIC=33,LITERAL_INT=34,LITERAL_REAL=35,LITERAL_STRING=36,
    IDENTIFIER=37,ASSIGN=38,OR=39,AND=40,INCREMENT=41,DECREMENT=42,
    EXP=43,SMALLER=44,GREATER=45,SMEQ=46,GTEQ=47,EQ=48,
    NEQ=49,PLUS=50,MINUS=51,TIMES=52,DIVIDE=53,MOD=54,
    UMINUS=55,LPAREN=56,NOT=57,LBRACKET=58};

// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<SemanticValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal class Parser: ShiftReduceParser<SemanticValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[89];
  private static State[] states = new State[188];
  private static string[] nonTerms = new string[] {
      "program", "classList", "statementList", "classDeclaration", "statement", 
      "declList", "decl", "formals", "onePlusFormals", "formal", "onePlusActuals", 
      "actuals", "expression", "lvalue", "literal", "type", "integralType", "modifierList", 
      "modifier", "formalModifier", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{24,6,1,186,2,-3},new int[]{-1,1,-2,3,-4,4});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{24,6,1,186,2,-3},new int[]{-2,5,-4,4});
    states[5] = new State(-4);
    states[6] = new State(new int[]{37,7});
    states[7] = new State(new int[]{5,8,25,181});
    states[8] = new State(new int[]{32,177,33,178,31,179,30,180,6,-8,37,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-6,9,-7,11,-18,13,-19,175});
    states[9] = new State(new int[]{6,10});
    states[10] = new State(-5);
    states[11] = new State(new int[]{32,177,33,178,31,179,30,180,6,-8,37,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-6,12,-7,11,-18,13,-19,175});
    states[12] = new State(-9);
    states[13] = new State(new int[]{37,168,14,99,17,100,18,101,16,102,15,103},new int[]{-16,14,-17,97});
    states[14] = new State(new int[]{37,15});
    states[15] = new State(new int[]{3,16,56,17});
    states[16] = new State(-10);
    states[17] = new State(new int[]{30,165,14,99,17,100,18,101,16,102,15,103,37,164,4,-34},new int[]{-8,18,-9,157,-10,158,-20,161,-16,166,-17,97});
    states[18] = new State(new int[]{4,19});
    states[19] = new State(new int[]{5,20});
    states[20] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146,6,-19},new int[]{-3,21,-5,23,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[21] = new State(new int[]{6,22});
    states[22] = new State(-11);
    states[23] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146,6,-19},new int[]{-3,24,-5,23,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[24] = new State(-20);
    states[25] = new State(-21);
    states[26] = new State(new int[]{3,27,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[27] = new State(-22);
    states[28] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,29,-15,58,-14,71});
    states[29] = new State(new int[]{40,-41,39,-41,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,-41,41,-41,42,-41,3,-41,4,-41,7,-41,11,-41,10,-41});
    states[30] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,31,-15,58,-14,71});
    states[31] = new State(new int[]{40,-42,39,-42,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,-42,41,-42,42,-42,3,-42,4,-42,7,-42,11,-42,10,-42});
    states[32] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,33,-15,58,-14,71});
    states[33] = new State(new int[]{40,-43,39,-43,44,-43,45,-43,46,-43,47,-43,48,-43,49,-43,50,44,51,46,52,48,53,50,54,52,43,-43,41,-43,42,-43,3,-43,4,-43,7,-43,11,-43,10,-43});
    states[34] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,35,-15,58,-14,71});
    states[35] = new State(new int[]{40,-44,39,-44,44,-44,45,-44,46,-44,47,-44,48,-44,49,-44,50,44,51,46,52,48,53,50,54,52,43,-44,41,-44,42,-44,3,-44,4,-44,7,-44,11,-44,10,-44});
    states[36] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,37,-15,58,-14,71});
    states[37] = new State(new int[]{40,-45,39,-45,44,-45,45,-45,46,-45,47,-45,48,-45,49,-45,50,44,51,46,52,48,53,50,54,52,43,-45,41,-45,42,-45,3,-45,4,-45,7,-45,11,-45,10,-45});
    states[38] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,39,-15,58,-14,71});
    states[39] = new State(new int[]{40,-46,39,-46,44,-46,45,-46,46,-46,47,-46,48,-46,49,-46,50,44,51,46,52,48,53,50,54,52,43,-46,41,-46,42,-46,3,-46,4,-46,7,-46,11,-46,10,-46});
    states[40] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,41,-15,58,-14,71});
    states[41] = new State(new int[]{40,-47,39,-47,44,-47,45,-47,46,-47,47,-47,48,-47,49,-47,50,44,51,46,52,48,53,50,54,52,43,-47,41,-47,42,-47,3,-47,4,-47,7,-47,11,-47,10,-47});
    states[42] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,43,-15,58,-14,71});
    states[43] = new State(new int[]{40,-48,39,-48,44,-48,45,-48,46,-48,47,-48,48,-48,49,-48,50,44,51,46,52,48,53,50,54,52,43,-48,41,-48,42,-48,3,-48,4,-48,7,-48,11,-48,10,-48});
    states[44] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,45,-15,58,-14,71});
    states[45] = new State(-49);
    states[46] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,47,-15,58,-14,71});
    states[47] = new State(-50);
    states[48] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,49,-15,58,-14,71});
    states[49] = new State(-51);
    states[50] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,51,-15,58,-14,71});
    states[51] = new State(-52);
    states[52] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,53,-15,58,-14,71});
    states[53] = new State(-53);
    states[54] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,55,-15,58,-14,71});
    states[55] = new State(new int[]{40,-54,39,-54,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,-54,41,-54,42,-54,3,-54,4,-54,7,-54,11,-54,10,-54});
    states[56] = new State(-58);
    states[57] = new State(-59);
    states[58] = new State(-55);
    states[59] = new State(-84);
    states[60] = new State(-85);
    states[61] = new State(-86);
    states[62] = new State(-87);
    states[63] = new State(-88);
    states[64] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,65,-15,58,-14,71});
    states[65] = new State(-56);
    states[66] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,67,-15,58,-14,71});
    states[67] = new State(-57);
    states[68] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,69,-15,58,-14,71});
    states[69] = new State(new int[]{4,70,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[70] = new State(-60);
    states[71] = new State(new int[]{58,72,9,104,40,-61,39,-61,44,-61,45,-61,46,-61,47,-61,48,-61,49,-61,50,-61,51,-61,52,-61,53,-61,54,-61,43,-61,41,-61,42,-61,3,-61,4,-61,7,-61,11,-61,10,-61});
    states[72] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,73,-15,58,-14,71});
    states[73] = new State(new int[]{7,74,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[74] = new State(-67);
    states[75] = new State(new int[]{56,76,58,-65,9,-65,40,-65,39,-65,44,-65,45,-65,46,-65,47,-65,48,-65,49,-65,50,-65,51,-65,52,-65,53,-65,54,-65,43,-65,41,-65,42,-65,3,-65,4,-65,7,-65,11,-65,10,-65});
    states[76] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85,4,-72},new int[]{-12,77,-11,79,-13,80,-15,58,-14,71});
    states[77] = new State(new int[]{4,78});
    states[78] = new State(-66);
    states[79] = new State(-73);
    states[80] = new State(new int[]{40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57,11,81,4,-74});
    states[81] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-11,82,-13,80,-15,58,-14,71});
    states[82] = new State(-75);
    states[83] = new State(-70);
    states[84] = new State(-71);
    states[85] = new State(new int[]{37,86,14,99,17,100,18,101,16,102,15,103},new int[]{-16,90,-17,97});
    states[86] = new State(new int[]{56,87,8,-83,58,-83});
    states[87] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85,4,-72},new int[]{-12,88,-11,79,-13,80,-15,58,-14,71});
    states[88] = new State(new int[]{4,89});
    states[89] = new State(-62);
    states[90] = new State(new int[]{58,91});
    states[91] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,92,-15,58,-14,71});
    states[92] = new State(new int[]{10,93,7,96,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[93] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,94,-15,58,-14,71});
    states[94] = new State(new int[]{7,95,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[95] = new State(-63);
    states[96] = new State(-64);
    states[97] = new State(new int[]{8,98,37,-76,58,-76});
    states[98] = new State(-77);
    states[99] = new State(-78);
    states[100] = new State(-79);
    states[101] = new State(-80);
    states[102] = new State(-81);
    states[103] = new State(-82);
    states[104] = new State(new int[]{37,105});
    states[105] = new State(new int[]{56,106,58,-69,9,-69,38,-69,3,-69,40,-69,39,-69,44,-69,45,-69,46,-69,47,-69,48,-69,49,-69,50,-69,51,-69,52,-69,53,-69,54,-69,43,-69,41,-69,42,-69,4,-69,7,-69,11,-69,10,-69});
    states[106] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85,4,-72},new int[]{-12,107,-11,79,-13,80,-15,58,-14,71});
    states[107] = new State(new int[]{4,108});
    states[108] = new State(-68);
    states[109] = new State(new int[]{58,72,9,104,38,110,3,-61,40,-61,39,-61,44,-61,45,-61,46,-61,47,-61,48,-61,49,-61,50,-61,51,-61,52,-61,53,-61,54,-61,43,-61,41,-61,42,-61});
    states[110] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,111,-15,58,-14,71});
    states[111] = new State(new int[]{3,112,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[112] = new State(-25);
    states[113] = new State(new int[]{56,76,58,-65,9,-65,38,-65,3,-65,40,-65,39,-65,44,-65,45,-65,46,-65,47,-65,48,-65,49,-65,50,-65,51,-65,52,-65,53,-65,54,-65,43,-65,41,-65,42,-65,8,-83,37,-83});
    states[114] = new State(new int[]{37,115});
    states[115] = new State(new int[]{3,116,38,117});
    states[116] = new State(-23);
    states[117] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,118,-15,58,-14,71});
    states[118] = new State(new int[]{3,119,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[119] = new State(-24);
    states[120] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146,6,-19},new int[]{-3,121,-5,23,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[121] = new State(new int[]{6,122});
    states[122] = new State(-26);
    states[123] = new State(new int[]{56,124});
    states[124] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,125,-15,58,-14,71});
    states[125] = new State(new int[]{4,126,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[126] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146},new int[]{-5,127,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[127] = new State(-27);
    states[128] = new State(new int[]{56,129});
    states[129] = new State(new int[]{37,148,3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146},new int[]{-5,130,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[130] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,131,-15,58,-14,71});
    states[131] = new State(new int[]{3,132,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[132] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,133,-15,58,-14,71});
    states[133] = new State(new int[]{4,134,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[134] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146},new int[]{-5,135,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[135] = new State(-28);
    states[136] = new State(new int[]{56,137});
    states[137] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,138,-15,58,-14,71});
    states[138] = new State(new int[]{4,139,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[139] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146},new int[]{-5,140,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[140] = new State(new int[]{22,141,3,-30,34,-30,35,-30,36,-30,28,-30,29,-30,51,-30,57,-30,56,-30,37,-30,23,-30,13,-30,26,-30,14,-30,17,-30,18,-30,16,-30,15,-30,5,-30,19,-30,20,-30,21,-30,27,-30,1,-30,6,-30});
    states[141] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146},new int[]{-5,142,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[142] = new State(-31);
    states[143] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,144,-15,58,-14,71});
    states[144] = new State(new int[]{3,145,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[145] = new State(-32);
    states[146] = new State(new int[]{3,147});
    states[147] = new State(-33);
    states[148] = new State(new int[]{12,149,56,76,58,-65,9,-65,38,-65,3,-65,40,-65,39,-65,44,-65,45,-65,46,-65,47,-65,48,-65,49,-65,50,-65,51,-65,52,-65,53,-65,54,-65,43,-65,41,-65,42,-65,8,-83,37,-83});
    states[149] = new State(new int[]{58,150});
    states[150] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,151,-15,58,-14,71});
    states[151] = new State(new int[]{10,152,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[152] = new State(new int[]{34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,75,23,83,13,84,26,85},new int[]{-13,153,-15,58,-14,71});
    states[153] = new State(new int[]{7,154,40,28,39,30,44,32,45,34,46,36,47,38,48,40,49,42,50,44,51,46,52,48,53,50,54,52,43,54,41,56,42,57});
    states[154] = new State(new int[]{4,155});
    states[155] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146},new int[]{-5,156,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[156] = new State(-29);
    states[157] = new State(-35);
    states[158] = new State(new int[]{11,159,4,-36});
    states[159] = new State(new int[]{30,165,14,99,17,100,18,101,16,102,15,103,37,164},new int[]{-9,160,-10,158,-20,161,-16,166,-17,97});
    states[160] = new State(-37);
    states[161] = new State(new int[]{14,99,17,100,18,101,16,102,15,103,37,164},new int[]{-16,162,-17,97});
    states[162] = new State(new int[]{37,163});
    states[163] = new State(-39);
    states[164] = new State(-83);
    states[165] = new State(-38);
    states[166] = new State(new int[]{37,167});
    states[167] = new State(-40);
    states[168] = new State(new int[]{56,169,8,-83,37,-83});
    states[169] = new State(new int[]{30,165,14,99,17,100,18,101,16,102,15,103,37,164,4,-34},new int[]{-8,170,-9,157,-10,158,-20,161,-16,166,-17,97});
    states[170] = new State(new int[]{4,171});
    states[171] = new State(new int[]{5,172});
    states[172] = new State(new int[]{3,25,34,59,35,60,36,61,28,62,29,63,51,64,57,66,56,68,37,113,23,83,13,84,26,85,14,99,17,100,18,101,16,102,15,103,5,120,19,123,20,128,21,136,27,143,1,146,6,-19},new int[]{-3,173,-5,23,-13,26,-15,58,-14,109,-16,114,-17,97});
    states[173] = new State(new int[]{6,174});
    states[174] = new State(-12);
    states[175] = new State(new int[]{32,177,33,178,31,179,30,180,37,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-18,176,-19,175});
    states[176] = new State(-14);
    states[177] = new State(-15);
    states[178] = new State(-16);
    states[179] = new State(-17);
    states[180] = new State(-18);
    states[181] = new State(new int[]{37,182});
    states[182] = new State(new int[]{5,183});
    states[183] = new State(new int[]{32,177,33,178,31,179,30,180,6,-8,37,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-6,184,-7,11,-18,13,-19,175});
    states[184] = new State(new int[]{6,185});
    states[185] = new State(-6);
    states[186] = new State(new int[]{3,187});
    states[187] = new State(-7);

    rules[1] = new Rule(-21, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{});
    rules[4] = new Rule(-2, new int[]{-4,-2});
    rules[5] = new Rule(-4, new int[]{24,37,5,-6,6});
    rules[6] = new Rule(-4, new int[]{24,37,25,37,5,-6,6});
    rules[7] = new Rule(-4, new int[]{1,3});
    rules[8] = new Rule(-6, new int[]{});
    rules[9] = new Rule(-6, new int[]{-7,-6});
    rules[10] = new Rule(-7, new int[]{-18,-16,37,3});
    rules[11] = new Rule(-7, new int[]{-18,-16,37,56,-8,4,5,-3,6});
    rules[12] = new Rule(-7, new int[]{-18,37,56,-8,4,5,-3,6});
    rules[13] = new Rule(-18, new int[]{});
    rules[14] = new Rule(-18, new int[]{-19,-18});
    rules[15] = new Rule(-19, new int[]{32});
    rules[16] = new Rule(-19, new int[]{33});
    rules[17] = new Rule(-19, new int[]{31});
    rules[18] = new Rule(-19, new int[]{30});
    rules[19] = new Rule(-3, new int[]{});
    rules[20] = new Rule(-3, new int[]{-5,-3});
    rules[21] = new Rule(-5, new int[]{3});
    rules[22] = new Rule(-5, new int[]{-13,3});
    rules[23] = new Rule(-5, new int[]{-16,37,3});
    rules[24] = new Rule(-5, new int[]{-16,37,38,-13,3});
    rules[25] = new Rule(-5, new int[]{-14,38,-13,3});
    rules[26] = new Rule(-5, new int[]{5,-3,6});
    rules[27] = new Rule(-5, new int[]{19,56,-13,4,-5});
    rules[28] = new Rule(-5, new int[]{20,56,-5,-13,3,-13,4,-5});
    rules[29] = new Rule(-5, new int[]{20,56,37,12,58,-13,10,-13,7,4,-5});
    rules[30] = new Rule(-5, new int[]{21,56,-13,4,-5});
    rules[31] = new Rule(-5, new int[]{21,56,-13,4,-5,22,-5});
    rules[32] = new Rule(-5, new int[]{27,-13,3});
    rules[33] = new Rule(-5, new int[]{1,3});
    rules[34] = new Rule(-8, new int[]{});
    rules[35] = new Rule(-8, new int[]{-9});
    rules[36] = new Rule(-9, new int[]{-10});
    rules[37] = new Rule(-9, new int[]{-10,11,-9});
    rules[38] = new Rule(-20, new int[]{30});
    rules[39] = new Rule(-10, new int[]{-20,-16,37});
    rules[40] = new Rule(-10, new int[]{-16,37});
    rules[41] = new Rule(-13, new int[]{-13,40,-13});
    rules[42] = new Rule(-13, new int[]{-13,39,-13});
    rules[43] = new Rule(-13, new int[]{-13,44,-13});
    rules[44] = new Rule(-13, new int[]{-13,45,-13});
    rules[45] = new Rule(-13, new int[]{-13,46,-13});
    rules[46] = new Rule(-13, new int[]{-13,47,-13});
    rules[47] = new Rule(-13, new int[]{-13,48,-13});
    rules[48] = new Rule(-13, new int[]{-13,49,-13});
    rules[49] = new Rule(-13, new int[]{-13,50,-13});
    rules[50] = new Rule(-13, new int[]{-13,51,-13});
    rules[51] = new Rule(-13, new int[]{-13,52,-13});
    rules[52] = new Rule(-13, new int[]{-13,53,-13});
    rules[53] = new Rule(-13, new int[]{-13,54,-13});
    rules[54] = new Rule(-13, new int[]{-13,43,-13});
    rules[55] = new Rule(-13, new int[]{-15});
    rules[56] = new Rule(-13, new int[]{51,-13});
    rules[57] = new Rule(-13, new int[]{57,-13});
    rules[58] = new Rule(-13, new int[]{-13,41});
    rules[59] = new Rule(-13, new int[]{-13,42});
    rules[60] = new Rule(-13, new int[]{56,-13,4});
    rules[61] = new Rule(-13, new int[]{-14});
    rules[62] = new Rule(-13, new int[]{26,37,56,-12,4});
    rules[63] = new Rule(-13, new int[]{26,-16,58,-13,10,-13,7});
    rules[64] = new Rule(-13, new int[]{26,-16,58,-13,7});
    rules[65] = new Rule(-14, new int[]{37});
    rules[66] = new Rule(-14, new int[]{37,56,-12,4});
    rules[67] = new Rule(-14, new int[]{-14,58,-13,7});
    rules[68] = new Rule(-14, new int[]{-14,9,37,56,-12,4});
    rules[69] = new Rule(-14, new int[]{-14,9,37});
    rules[70] = new Rule(-14, new int[]{23});
    rules[71] = new Rule(-14, new int[]{13});
    rules[72] = new Rule(-12, new int[]{});
    rules[73] = new Rule(-12, new int[]{-11});
    rules[74] = new Rule(-11, new int[]{-13});
    rules[75] = new Rule(-11, new int[]{-13,11,-11});
    rules[76] = new Rule(-16, new int[]{-17});
    rules[77] = new Rule(-16, new int[]{-17,8});
    rules[78] = new Rule(-17, new int[]{14});
    rules[79] = new Rule(-17, new int[]{17});
    rules[80] = new Rule(-17, new int[]{18});
    rules[81] = new Rule(-17, new int[]{16});
    rules[82] = new Rule(-17, new int[]{15});
    rules[83] = new Rule(-17, new int[]{37});
    rules[84] = new Rule(-15, new int[]{34});
    rules[85] = new Rule(-15, new int[]{35});
    rules[86] = new Rule(-15, new int[]{36});
    rules[87] = new Rule(-15, new int[]{28});
    rules[88] = new Rule(-15, new int[]{29});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> classList
{ SyntaxTreeRoot = CurrentSemanticValue.StatementList; }
        break;
      case 3: // classList -> /* empty */
{ CurrentSemanticValue.StatementList = new ASTStatementList(); }
        break;
      case 4: // classList -> classDeclaration, classList
{ CurrentSemanticValue.StatementList = new ASTStatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); }
        break;
      case 5: // classDeclaration -> CLASS, IDENTIFIER, LBRACE, declList, RBRACE
{ CurrentSemanticValue.Statement = new ASTClassDefinition(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].DeclarationList); }
        break;
      case 6: // classDeclaration -> CLASS, IDENTIFIER, EXTENDS, IDENTIFIER, LBRACE, declList, 
              //                     RBRACE
{ CurrentSemanticValue.Statement = new ASTSubClassDefinition(ValueStack[ValueStack.Depth-6].Token.Value, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].DeclarationList); }
        break;
      case 8: // declList -> /* empty */
{ CurrentSemanticValue.DeclarationList = new ASTDeclarationList(); }
        break;
      case 9: // declList -> decl, declList
{ CurrentSemanticValue.DeclarationList = new ASTDeclarationList(ValueStack[ValueStack.Depth-2].Declaration, ValueStack[ValueStack.Depth-1].DeclarationList); }
        break;
      case 10: // decl -> modifierList, type, IDENTIFIER, SEMI
{ CurrentSemanticValue.Declaration = new ASTDeclarationField(ValueStack[ValueStack.Depth-4].ModifierList, ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Token.Value); }
        break;
      case 11: // decl -> modifierList, type, IDENTIFIER, LPAREN, formals, RPAREN, LBRACE, 
               //         statementList, RBRACE
{ CurrentSemanticValue.Declaration = new ASTDeclarationMethod(ValueStack[ValueStack.Depth-9].ModifierList, ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].Token.Value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StatementList); }
        break;
      case 12: // decl -> modifierList, IDENTIFIER, LPAREN, formals, RPAREN, LBRACE, 
               //         statementList, RBRACE
{ CurrentSemanticValue.Declaration = new ASTDeclarationCtor(ValueStack[ValueStack.Depth-8].ModifierList, ValueStack[ValueStack.Depth-7].Token.Value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StatementList); }
        break;
      case 13: // modifierList -> /* empty */
{ CurrentSemanticValue.ModifierList = new ASTModifierList(); }
        break;
      case 14: // modifierList -> modifier, modifierList
{ CurrentSemanticValue.ModifierList = new ASTModifierList(ValueStack[ValueStack.Depth-2].Token.Value, ValueStack[ValueStack.Depth-1].ModifierList); }
        break;
      case 19: // statementList -> /* empty */
{ CurrentSemanticValue.StatementList = new ASTStatementList(); }
        break;
      case 20: // statementList -> statement, statementList
{ CurrentSemanticValue.StatementList = new ASTStatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); }
        break;
      case 22: // statement -> expression, SEMI
{ CurrentSemanticValue.Statement = new ASTStatementExpr(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 23: // statement -> type, IDENTIFIER, SEMI
{ CurrentSemanticValue.Statement = new ASTDeclarationLocal(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-3].StartColumn), ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Token.Value); }
        break;
      case 24: // statement -> type, IDENTIFIER, ASSIGN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTDeclarationLocal(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-5].StartColumn), ValueStack[ValueStack.Depth-5].Type, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 25: // statement -> lvalue, ASSIGN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTAssign(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 26: // statement -> LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Statement = new ASTBlock(ValueStack[ValueStack.Depth-2].StatementList); }
        break;
      case 27: // statement -> WHILE, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTWhile(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 28: // statement -> FOR, LPAREN, statement, expression, SEMI, expression, RPAREN, 
               //              statement
{ CurrentSemanticValue.Statement = new ASTFor(ValueStack[ValueStack.Depth-6].Statement, ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 29: // statement -> FOR, LPAREN, IDENTIFIER, IN, LBRACKET, expression, DOTDOT, 
               //              expression, RBRACKET, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTForIn(new ASTIdentifier(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-9].StartColumn), ValueStack[ValueStack.Depth-9].Token.Value), ValueStack[ValueStack.Depth-6].Expression, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 30: // statement -> IF, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTIfThen(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 31: // statement -> IF, LPAREN, expression, RPAREN, statement, ELSE, statement
{ CurrentSemanticValue.Statement = new ASTIfThenElse(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 32: // statement -> RETURN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTReturn(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 33: // statement -> error, SEMI
{ CurrentSemanticValue.Statement = new ASTNoop(); }
        break;
      case 34: // formals -> /* empty */
{ CurrentSemanticValue.FormalList = new ASTFormalList(); }
        break;
      case 35: // formals -> onePlusFormals
{ CurrentSemanticValue.FormalList = ValueStack[ValueStack.Depth-1].FormalList; }
        break;
      case 36: // onePlusFormals -> formal
{ CurrentSemanticValue.FormalList = new ASTFormalList(ValueStack[ValueStack.Depth-1].Formal, new ASTFormalList()); }
        break;
      case 37: // onePlusFormals -> formal, COMMA, onePlusFormals
{ CurrentSemanticValue.FormalList = new ASTFormalList(ValueStack[ValueStack.Depth-3].Formal, ValueStack[ValueStack.Depth-1].FormalList); }
        break;
      case 39: // formal -> formalModifier, type, IDENTIFIER
{ CurrentSemanticValue.Formal = new ASTFormal(ValueStack[ValueStack.Depth-3].Token.Value, ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 40: // formal -> type, IDENTIFIER
{ CurrentSemanticValue.Formal = new ASTFormal(ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 41: // expression -> expression, AND, expression
{ CurrentSemanticValue.Expression = new ASTAnd(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 42: // expression -> expression, OR, expression
{ CurrentSemanticValue.Expression = new ASTOr(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 43: // expression -> expression, SMALLER, expression
{ CurrentSemanticValue.Expression = new ASTSmaller(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 44: // expression -> expression, GREATER, expression
{ CurrentSemanticValue.Expression = new ASTGreater(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 45: // expression -> expression, SMEQ, expression
{ CurrentSemanticValue.Expression = new ASTSmallerEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 46: // expression -> expression, GTEQ, expression
{ CurrentSemanticValue.Expression = new ASTGreaterEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 47: // expression -> expression, EQ, expression
{ CurrentSemanticValue.Expression = new ASTEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 48: // expression -> expression, NEQ, expression
{ CurrentSemanticValue.Expression = new ASTNotEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 49: // expression -> expression, PLUS, expression
{ CurrentSemanticValue.Expression = new ASTAdd(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 50: // expression -> expression, MINUS, expression
{ CurrentSemanticValue.Expression = new ASTSubtract(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 51: // expression -> expression, TIMES, expression
{ CurrentSemanticValue.Expression = new ASTMultiply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 52: // expression -> expression, DIVIDE, expression
{ CurrentSemanticValue.Expression = new ASTDivide(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 53: // expression -> expression, MOD, expression
{ CurrentSemanticValue.Expression = new ASTModulo(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 54: // expression -> expression, EXP, expression
{ CurrentSemanticValue.Expression = new ASTExponent(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 55: // expression -> literal
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; }
        break;
      case 56: // expression -> MINUS, expression
{ CurrentSemanticValue.Expression = new ASTNegative(ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 57: // expression -> NOT, expression
{ CurrentSemanticValue.Expression = new ASTNot(ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 58: // expression -> expression, INCREMENT
{ CurrentSemanticValue.Expression = new ASTIncrement(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 59: // expression -> expression, DECREMENT
{ CurrentSemanticValue.Expression = new ASTDecrement(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 60: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression; }
        break;
      case 61: // expression -> lvalue
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; }
        break;
      case 62: // expression -> NEW, IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInstantiateClass(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); }
        break;
      case 63: // expression -> NEW, type, LBRACKET, expression, DOTDOT, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTInstantiateArray(ValueStack[ValueStack.Depth-6].Type, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 64: // expression -> NEW, type, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTInstantiateArray(ValueStack[ValueStack.Depth-4].Type, ValueStack[ValueStack.Depth-2].Expression, new ASTInteger(0)); }
        break;
      case 65: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.Expression = new ASTIdentifier(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-1].StartColumn), ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 66: // lvalue -> IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInvoke(new ASTIdentifier(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-4].StartColumn), "self"), ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); }
        break;
      case 67: // lvalue -> lvalue, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTDereferenceArray(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 68: // lvalue -> lvalue, DOT, IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInvoke(ValueStack[ValueStack.Depth-6].Expression, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); }
        break;
      case 69: // lvalue -> lvalue, DOT, IDENTIFIER
{ CurrentSemanticValue.Expression = new ASTDereferenceField(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 70: // lvalue -> SELF
{ CurrentSemanticValue.Expression = new ASTSelf(); }
        break;
      case 71: // lvalue -> BASE
{ CurrentSemanticValue.Expression = new ASTBase(); }
        break;
      case 72: // actuals -> /* empty */
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(); }
        break;
      case 73: // actuals -> onePlusActuals
{ CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-1].ExpressionList; }
        break;
      case 74: // onePlusActuals -> expression
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(ValueStack[ValueStack.Depth-1].Expression, new ASTExpressionList()); }
        break;
      case 75: // onePlusActuals -> expression, COMMA, onePlusActuals
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].ExpressionList); }
        break;
      case 76: // type -> integralType
{ CurrentSemanticValue.Type = ValueStack[ValueStack.Depth-1].Type; }
        break;
      case 77: // type -> integralType, PBRACKET
{ CurrentSemanticValue.Type = new ASTTypeArray(ValueStack[ValueStack.Depth-2].Type); }
        break;
      case 78: // integralType -> TINT
{ CurrentSemanticValue.Type = new ASTTypeInt(); }
        break;
      case 79: // integralType -> TBOOL
{ CurrentSemanticValue.Type = new ASTTypeBool(); }
        break;
      case 80: // integralType -> TVOID
{ CurrentSemanticValue.Type = new ASTTypeVoid(); }
        break;
      case 81: // integralType -> TSTRING
{ CurrentSemanticValue.Type = new ASTTypeString(); }
        break;
      case 82: // integralType -> TREAL
{ CurrentSemanticValue.Type = new ASTTypeReal(); }
        break;
      case 83: // integralType -> IDENTIFIER
{ CurrentSemanticValue.Type = new ASTTypeName(ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 84: // literal -> LITERAL_INT
{ CurrentSemanticValue.Expression = new ASTInteger(Int32.Parse(ValueStack[ValueStack.Depth-1].Token.Value)); }
        break;
      case 85: // literal -> LITERAL_REAL
{ CurrentSemanticValue.Expression = new ASTReal(Double.Parse(ValueStack[ValueStack.Depth-1].Token.Value)); }
        break;
      case 86: // literal -> LITERAL_STRING
{ CurrentSemanticValue.Expression = new ASTString(ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 87: // literal -> TRUE
{ CurrentSemanticValue.Expression = new ASTBoolean(true); }
        break;
      case 88: // literal -> FALSE
{ CurrentSemanticValue.Expression = new ASTBoolean(false); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public ASTStatementList SyntaxTreeRoot { get; set; }

public Parser(Scanner scan) : base(scan)
{
}

public SourceLocation Location(int line, int column) 
{ 
	return new SourceLocation(line, column, string.Empty);
}
}
}
