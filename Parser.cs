// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.0
// Machine:  FEANOR
// DateTime: 6/25/2010 9:54:03 PM
// UserName: Matt_2
// Input file <..\..\GeneratorInputFiles\CFlat.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LexicalAnalysis;
using AbstractSyntaxTree;
using CFlat;

namespace SyntaxAnalysis
{
internal enum Tokens {
    error=1,EOF=2,SEMI=3,RPAREN=4,LBRACE=5,RBRACE=6,
    RBRACKET=7,PBRACKET=8,DOT=9,DOTDOT=10,COMMA=11,IN=12,
    BASE=13,TINT=14,TREAL=15,TSTRING=16,TBOOL=17,TVOID=18,
    WHILE=19,FOR=20,IF=21,ELSE=22,SELF=23,CLASS=24,
    EXTENDS=25,NEW=26,RETURN=27,TRUE=28,FALSE=29,LITERAL_INT=30,
    LITERAL_REAL=31,LITERAL_STRING=32,IDENTIFIER=33,ASSIGN=34,OR=35,AND=36,
    INCREMENT=37,DECREMENT=38,EXP=39,SMALLER=40,GREATER=41,SMEQ=42,
    GTEQ=43,EQ=44,NEQ=45,PLUS=46,MINUS=47,TIMES=48,
    DIVIDE=49,MOD=50,UMINUS=51,LPAREN=52,NOT=53,LBRACKET=54};

// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<SemanticValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal class Parser: ShiftReduceParser<SemanticValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[81];
  private static State[] states = new State[177];
  private static string[] nonTerms = new string[] {
      "program", "classList", "statementList", "classDeclaration", "statement", 
      "declList", "decl", "formals", "onePlusFormals", "formal", "onePlusActuals", 
      "actuals", "expression", "lvalue", "literal", "type", "integralType", "$accept", 
      };

  static Parser() {
    states[0] = new State(new int[]{24,6,1,175,2,-3},new int[]{-1,1,-2,3,-4,4});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{24,6,1,175,2,-3},new int[]{-2,5,-4,4});
    states[5] = new State(-4);
    states[6] = new State(new int[]{33,7});
    states[7] = new State(new int[]{5,8,25,170});
    states[8] = new State(new int[]{14,98,17,99,18,100,16,101,15,102,33,163,6,-8},new int[]{-6,9,-7,11,-16,13,-17,96});
    states[9] = new State(new int[]{6,10});
    states[10] = new State(-5);
    states[11] = new State(new int[]{14,98,17,99,18,100,16,101,15,102,33,163,6,-8},new int[]{-6,12,-7,11,-16,13,-17,96});
    states[12] = new State(-9);
    states[13] = new State(new int[]{33,14});
    states[14] = new State(new int[]{3,15,52,16});
    states[15] = new State(-10);
    states[16] = new State(new int[]{14,98,17,99,18,100,16,101,15,102,33,162,4,-28},new int[]{-8,17,-9,156,-10,157,-16,160,-17,96});
    states[17] = new State(new int[]{4,18});
    states[18] = new State(new int[]{5,19});
    states[19] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145,6,-13},new int[]{-3,20,-5,22,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[20] = new State(new int[]{6,21});
    states[21] = new State(-11);
    states[22] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145,6,-13},new int[]{-3,23,-5,22,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[23] = new State(-14);
    states[24] = new State(-15);
    states[25] = new State(new int[]{3,26,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[26] = new State(-16);
    states[27] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,28,-15,57,-14,70});
    states[28] = new State(new int[]{36,-33,35,-33,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,-33,37,-33,38,-33,3,-33,4,-33,7,-33,11,-33,10,-33});
    states[29] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,30,-15,57,-14,70});
    states[30] = new State(new int[]{36,-34,35,-34,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,-34,37,-34,38,-34,3,-34,4,-34,7,-34,11,-34,10,-34});
    states[31] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,32,-15,57,-14,70});
    states[32] = new State(new int[]{36,-35,35,-35,40,-35,41,-35,42,-35,43,-35,44,-35,45,-35,46,43,47,45,48,47,49,49,50,51,39,-35,37,-35,38,-35,3,-35,4,-35,7,-35,11,-35,10,-35});
    states[33] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,34,-15,57,-14,70});
    states[34] = new State(new int[]{36,-36,35,-36,40,-36,41,-36,42,-36,43,-36,44,-36,45,-36,46,43,47,45,48,47,49,49,50,51,39,-36,37,-36,38,-36,3,-36,4,-36,7,-36,11,-36,10,-36});
    states[35] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,36,-15,57,-14,70});
    states[36] = new State(new int[]{36,-37,35,-37,40,-37,41,-37,42,-37,43,-37,44,-37,45,-37,46,43,47,45,48,47,49,49,50,51,39,-37,37,-37,38,-37,3,-37,4,-37,7,-37,11,-37,10,-37});
    states[37] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,38,-15,57,-14,70});
    states[38] = new State(new int[]{36,-38,35,-38,40,-38,41,-38,42,-38,43,-38,44,-38,45,-38,46,43,47,45,48,47,49,49,50,51,39,-38,37,-38,38,-38,3,-38,4,-38,7,-38,11,-38,10,-38});
    states[39] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,40,-15,57,-14,70});
    states[40] = new State(new int[]{36,-39,35,-39,40,-39,41,-39,42,-39,43,-39,44,-39,45,-39,46,43,47,45,48,47,49,49,50,51,39,-39,37,-39,38,-39,3,-39,4,-39,7,-39,11,-39,10,-39});
    states[41] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,42,-15,57,-14,70});
    states[42] = new State(new int[]{36,-40,35,-40,40,-40,41,-40,42,-40,43,-40,44,-40,45,-40,46,43,47,45,48,47,49,49,50,51,39,-40,37,-40,38,-40,3,-40,4,-40,7,-40,11,-40,10,-40});
    states[43] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,44,-15,57,-14,70});
    states[44] = new State(-41);
    states[45] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,46,-15,57,-14,70});
    states[46] = new State(-42);
    states[47] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,48,-15,57,-14,70});
    states[48] = new State(-43);
    states[49] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,50,-15,57,-14,70});
    states[50] = new State(-44);
    states[51] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,52,-15,57,-14,70});
    states[52] = new State(-45);
    states[53] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,54,-15,57,-14,70});
    states[54] = new State(new int[]{36,-46,35,-46,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,-46,37,-46,38,-46,3,-46,4,-46,7,-46,11,-46,10,-46});
    states[55] = new State(-50);
    states[56] = new State(-51);
    states[57] = new State(-47);
    states[58] = new State(-76);
    states[59] = new State(-77);
    states[60] = new State(-78);
    states[61] = new State(-79);
    states[62] = new State(-80);
    states[63] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,64,-15,57,-14,70});
    states[64] = new State(-48);
    states[65] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,66,-15,57,-14,70});
    states[66] = new State(-49);
    states[67] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,68,-15,57,-14,70});
    states[68] = new State(new int[]{4,69,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[69] = new State(-52);
    states[70] = new State(new int[]{54,71,9,103,36,-53,35,-53,40,-53,41,-53,42,-53,43,-53,44,-53,45,-53,46,-53,47,-53,48,-53,49,-53,50,-53,39,-53,37,-53,38,-53,3,-53,4,-53,7,-53,11,-53,10,-53});
    states[71] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,72,-15,57,-14,70});
    states[72] = new State(new int[]{7,73,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[73] = new State(-59);
    states[74] = new State(new int[]{52,75,54,-57,9,-57,36,-57,35,-57,40,-57,41,-57,42,-57,43,-57,44,-57,45,-57,46,-57,47,-57,48,-57,49,-57,50,-57,39,-57,37,-57,38,-57,3,-57,4,-57,7,-57,11,-57,10,-57});
    states[75] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84,4,-64},new int[]{-12,76,-11,78,-13,79,-15,57,-14,70});
    states[76] = new State(new int[]{4,77});
    states[77] = new State(-58);
    states[78] = new State(-65);
    states[79] = new State(new int[]{36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56,11,80,4,-66});
    states[80] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-11,81,-13,79,-15,57,-14,70});
    states[81] = new State(-67);
    states[82] = new State(-62);
    states[83] = new State(-63);
    states[84] = new State(new int[]{33,85,14,98,17,99,18,100,16,101,15,102},new int[]{-16,89,-17,96});
    states[85] = new State(new int[]{52,86,8,-75,54,-75});
    states[86] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84,4,-64},new int[]{-12,87,-11,78,-13,79,-15,57,-14,70});
    states[87] = new State(new int[]{4,88});
    states[88] = new State(-54);
    states[89] = new State(new int[]{54,90});
    states[90] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,91,-15,57,-14,70});
    states[91] = new State(new int[]{10,92,7,95,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[92] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,93,-15,57,-14,70});
    states[93] = new State(new int[]{7,94,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[94] = new State(-55);
    states[95] = new State(-56);
    states[96] = new State(new int[]{8,97,33,-68,54,-68});
    states[97] = new State(-69);
    states[98] = new State(-70);
    states[99] = new State(-71);
    states[100] = new State(-72);
    states[101] = new State(-73);
    states[102] = new State(-74);
    states[103] = new State(new int[]{33,104});
    states[104] = new State(new int[]{52,105,54,-61,9,-61,34,-61,3,-61,36,-61,35,-61,40,-61,41,-61,42,-61,43,-61,44,-61,45,-61,46,-61,47,-61,48,-61,49,-61,50,-61,39,-61,37,-61,38,-61,4,-61,7,-61,11,-61,10,-61});
    states[105] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84,4,-64},new int[]{-12,106,-11,78,-13,79,-15,57,-14,70});
    states[106] = new State(new int[]{4,107});
    states[107] = new State(-60);
    states[108] = new State(new int[]{54,71,9,103,34,109,3,-53,36,-53,35,-53,40,-53,41,-53,42,-53,43,-53,44,-53,45,-53,46,-53,47,-53,48,-53,49,-53,50,-53,39,-53,37,-53,38,-53});
    states[109] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,110,-15,57,-14,70});
    states[110] = new State(new int[]{3,111,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[111] = new State(-19);
    states[112] = new State(new int[]{52,75,54,-57,9,-57,34,-57,3,-57,36,-57,35,-57,40,-57,41,-57,42,-57,43,-57,44,-57,45,-57,46,-57,47,-57,48,-57,49,-57,50,-57,39,-57,37,-57,38,-57,8,-75,33,-75});
    states[113] = new State(new int[]{33,114});
    states[114] = new State(new int[]{3,115,34,116});
    states[115] = new State(-17);
    states[116] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,117,-15,57,-14,70});
    states[117] = new State(new int[]{3,118,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[118] = new State(-18);
    states[119] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145,6,-13},new int[]{-3,120,-5,22,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[120] = new State(new int[]{6,121});
    states[121] = new State(-20);
    states[122] = new State(new int[]{52,123});
    states[123] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,124,-15,57,-14,70});
    states[124] = new State(new int[]{4,125,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[125] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145},new int[]{-5,126,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[126] = new State(-21);
    states[127] = new State(new int[]{52,128});
    states[128] = new State(new int[]{33,147,3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145},new int[]{-5,129,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[129] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,130,-15,57,-14,70});
    states[130] = new State(new int[]{3,131,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[131] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,132,-15,57,-14,70});
    states[132] = new State(new int[]{4,133,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[133] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145},new int[]{-5,134,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[134] = new State(-22);
    states[135] = new State(new int[]{52,136});
    states[136] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,137,-15,57,-14,70});
    states[137] = new State(new int[]{4,138,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[138] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145},new int[]{-5,139,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[139] = new State(new int[]{22,140,3,-24,30,-24,31,-24,32,-24,28,-24,29,-24,47,-24,53,-24,52,-24,33,-24,23,-24,13,-24,26,-24,14,-24,17,-24,18,-24,16,-24,15,-24,5,-24,19,-24,20,-24,21,-24,27,-24,1,-24,6,-24});
    states[140] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145},new int[]{-5,141,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[141] = new State(-25);
    states[142] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,143,-15,57,-14,70});
    states[143] = new State(new int[]{3,144,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[144] = new State(-26);
    states[145] = new State(new int[]{3,146});
    states[146] = new State(-27);
    states[147] = new State(new int[]{12,148,52,75,54,-57,9,-57,34,-57,3,-57,36,-57,35,-57,40,-57,41,-57,42,-57,43,-57,44,-57,45,-57,46,-57,47,-57,48,-57,49,-57,50,-57,39,-57,37,-57,38,-57,8,-75,33,-75});
    states[148] = new State(new int[]{54,149});
    states[149] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,150,-15,57,-14,70});
    states[150] = new State(new int[]{10,151,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[151] = new State(new int[]{30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,74,23,82,13,83,26,84},new int[]{-13,152,-15,57,-14,70});
    states[152] = new State(new int[]{7,153,36,27,35,29,40,31,41,33,42,35,43,37,44,39,45,41,46,43,47,45,48,47,49,49,50,51,39,53,37,55,38,56});
    states[153] = new State(new int[]{4,154});
    states[154] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145},new int[]{-5,155,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[155] = new State(-23);
    states[156] = new State(-29);
    states[157] = new State(new int[]{11,158,4,-30});
    states[158] = new State(new int[]{14,98,17,99,18,100,16,101,15,102,33,162},new int[]{-9,159,-10,157,-16,160,-17,96});
    states[159] = new State(-31);
    states[160] = new State(new int[]{33,161});
    states[161] = new State(-32);
    states[162] = new State(-75);
    states[163] = new State(new int[]{52,164,8,-75,33,-75});
    states[164] = new State(new int[]{14,98,17,99,18,100,16,101,15,102,33,162,4,-28},new int[]{-8,165,-9,156,-10,157,-16,160,-17,96});
    states[165] = new State(new int[]{4,166});
    states[166] = new State(new int[]{5,167});
    states[167] = new State(new int[]{3,24,30,58,31,59,32,60,28,61,29,62,47,63,53,65,52,67,33,112,23,82,13,83,26,84,14,98,17,99,18,100,16,101,15,102,5,119,19,122,20,127,21,135,27,142,1,145,6,-13},new int[]{-3,168,-5,22,-13,25,-15,57,-14,108,-16,113,-17,96});
    states[168] = new State(new int[]{6,169});
    states[169] = new State(-12);
    states[170] = new State(new int[]{33,171});
    states[171] = new State(new int[]{5,172});
    states[172] = new State(new int[]{14,98,17,99,18,100,16,101,15,102,33,163,6,-8},new int[]{-6,173,-7,11,-16,13,-17,96});
    states[173] = new State(new int[]{6,174});
    states[174] = new State(-6);
    states[175] = new State(new int[]{3,176});
    states[176] = new State(-7);

    rules[1] = new Rule(-18, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{});
    rules[4] = new Rule(-2, new int[]{-4,-2});
    rules[5] = new Rule(-4, new int[]{24,33,5,-6,6});
    rules[6] = new Rule(-4, new int[]{24,33,25,33,5,-6,6});
    rules[7] = new Rule(-4, new int[]{1,3});
    rules[8] = new Rule(-6, new int[]{});
    rules[9] = new Rule(-6, new int[]{-7,-6});
    rules[10] = new Rule(-7, new int[]{-16,33,3});
    rules[11] = new Rule(-7, new int[]{-16,33,52,-8,4,5,-3,6});
    rules[12] = new Rule(-7, new int[]{33,52,-8,4,5,-3,6});
    rules[13] = new Rule(-3, new int[]{});
    rules[14] = new Rule(-3, new int[]{-5,-3});
    rules[15] = new Rule(-5, new int[]{3});
    rules[16] = new Rule(-5, new int[]{-13,3});
    rules[17] = new Rule(-5, new int[]{-16,33,3});
    rules[18] = new Rule(-5, new int[]{-16,33,34,-13,3});
    rules[19] = new Rule(-5, new int[]{-14,34,-13,3});
    rules[20] = new Rule(-5, new int[]{5,-3,6});
    rules[21] = new Rule(-5, new int[]{19,52,-13,4,-5});
    rules[22] = new Rule(-5, new int[]{20,52,-5,-13,3,-13,4,-5});
    rules[23] = new Rule(-5, new int[]{20,52,33,12,54,-13,10,-13,7,4,-5});
    rules[24] = new Rule(-5, new int[]{21,52,-13,4,-5});
    rules[25] = new Rule(-5, new int[]{21,52,-13,4,-5,22,-5});
    rules[26] = new Rule(-5, new int[]{27,-13,3});
    rules[27] = new Rule(-5, new int[]{1,3});
    rules[28] = new Rule(-8, new int[]{});
    rules[29] = new Rule(-8, new int[]{-9});
    rules[30] = new Rule(-9, new int[]{-10});
    rules[31] = new Rule(-9, new int[]{-10,11,-9});
    rules[32] = new Rule(-10, new int[]{-16,33});
    rules[33] = new Rule(-13, new int[]{-13,36,-13});
    rules[34] = new Rule(-13, new int[]{-13,35,-13});
    rules[35] = new Rule(-13, new int[]{-13,40,-13});
    rules[36] = new Rule(-13, new int[]{-13,41,-13});
    rules[37] = new Rule(-13, new int[]{-13,42,-13});
    rules[38] = new Rule(-13, new int[]{-13,43,-13});
    rules[39] = new Rule(-13, new int[]{-13,44,-13});
    rules[40] = new Rule(-13, new int[]{-13,45,-13});
    rules[41] = new Rule(-13, new int[]{-13,46,-13});
    rules[42] = new Rule(-13, new int[]{-13,47,-13});
    rules[43] = new Rule(-13, new int[]{-13,48,-13});
    rules[44] = new Rule(-13, new int[]{-13,49,-13});
    rules[45] = new Rule(-13, new int[]{-13,50,-13});
    rules[46] = new Rule(-13, new int[]{-13,39,-13});
    rules[47] = new Rule(-13, new int[]{-15});
    rules[48] = new Rule(-13, new int[]{47,-13});
    rules[49] = new Rule(-13, new int[]{53,-13});
    rules[50] = new Rule(-13, new int[]{-13,37});
    rules[51] = new Rule(-13, new int[]{-13,38});
    rules[52] = new Rule(-13, new int[]{52,-13,4});
    rules[53] = new Rule(-13, new int[]{-14});
    rules[54] = new Rule(-13, new int[]{26,33,52,-12,4});
    rules[55] = new Rule(-13, new int[]{26,-16,54,-13,10,-13,7});
    rules[56] = new Rule(-13, new int[]{26,-16,54,-13,7});
    rules[57] = new Rule(-14, new int[]{33});
    rules[58] = new Rule(-14, new int[]{33,52,-12,4});
    rules[59] = new Rule(-14, new int[]{-14,54,-13,7});
    rules[60] = new Rule(-14, new int[]{-14,9,33,52,-12,4});
    rules[61] = new Rule(-14, new int[]{-14,9,33});
    rules[62] = new Rule(-14, new int[]{23});
    rules[63] = new Rule(-14, new int[]{13});
    rules[64] = new Rule(-12, new int[]{});
    rules[65] = new Rule(-12, new int[]{-11});
    rules[66] = new Rule(-11, new int[]{-13});
    rules[67] = new Rule(-11, new int[]{-13,11,-11});
    rules[68] = new Rule(-16, new int[]{-17});
    rules[69] = new Rule(-16, new int[]{-17,8});
    rules[70] = new Rule(-17, new int[]{14});
    rules[71] = new Rule(-17, new int[]{17});
    rules[72] = new Rule(-17, new int[]{18});
    rules[73] = new Rule(-17, new int[]{16});
    rules[74] = new Rule(-17, new int[]{15});
    rules[75] = new Rule(-17, new int[]{33});
    rules[76] = new Rule(-15, new int[]{30});
    rules[77] = new Rule(-15, new int[]{31});
    rules[78] = new Rule(-15, new int[]{32});
    rules[79] = new Rule(-15, new int[]{28});
    rules[80] = new Rule(-15, new int[]{29});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> classList
{ SyntaxTreeRoot = CurrentSemanticValue.StatementList; }
        break;
      case 3: // classList -> /* empty */
{ CurrentSemanticValue.StatementList = new ASTStatementList(); }
        break;
      case 4: // classList -> classDeclaration, classList
{ CurrentSemanticValue.StatementList = new ASTStatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); }
        break;
      case 5: // classDeclaration -> CLASS, IDENTIFIER, LBRACE, declList, RBRACE
{ CurrentSemanticValue.Statement = new ASTClassDefinition(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].DeclarationList); }
        break;
      case 6: // classDeclaration -> CLASS, IDENTIFIER, EXTENDS, IDENTIFIER, LBRACE, declList, 
              //                     RBRACE
{ CurrentSemanticValue.Statement = new ASTSubClassDefinition(ValueStack[ValueStack.Depth-6].Token.Value, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].DeclarationList); }
        break;
      case 8: // declList -> /* empty */
{ CurrentSemanticValue.DeclarationList = new ASTDeclarationList(); }
        break;
      case 9: // declList -> decl, declList
{ CurrentSemanticValue.DeclarationList = new ASTDeclarationList(ValueStack[ValueStack.Depth-2].Declaration, ValueStack[ValueStack.Depth-1].DeclarationList); }
        break;
      case 10: // decl -> type, IDENTIFIER, SEMI
{ CurrentSemanticValue.Declaration = new ASTDeclarationField(ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Token.Value); }
        break;
      case 11: // decl -> type, IDENTIFIER, LPAREN, formals, RPAREN, LBRACE, statementList, 
               //         RBRACE
{ CurrentSemanticValue.Declaration = new ASTDeclarationMethod(ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].Token.Value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StatementList); }
        break;
      case 12: // decl -> IDENTIFIER, LPAREN, formals, RPAREN, LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Declaration = new ASTDeclarationCtor(ValueStack[ValueStack.Depth-7].Token.Value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StatementList); }
        break;
      case 13: // statementList -> /* empty */
{ CurrentSemanticValue.StatementList = new ASTStatementList(); }
        break;
      case 14: // statementList -> statement, statementList
{ CurrentSemanticValue.StatementList = new ASTStatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); }
        break;
      case 16: // statement -> expression, SEMI
{ CurrentSemanticValue.Statement = new ASTStatementExpr(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 17: // statement -> type, IDENTIFIER, SEMI
{ CurrentSemanticValue.Statement = new ASTDeclarationLocal(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-3].StartColumn), ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Token.Value); }
        break;
      case 18: // statement -> type, IDENTIFIER, ASSIGN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTDeclarationLocal(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-5].StartColumn), ValueStack[ValueStack.Depth-5].Type, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 19: // statement -> lvalue, ASSIGN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTAssign(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 20: // statement -> LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Statement = new ASTBlock(ValueStack[ValueStack.Depth-2].StatementList); }
        break;
      case 21: // statement -> WHILE, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTWhile(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 22: // statement -> FOR, LPAREN, statement, expression, SEMI, expression, RPAREN, 
               //              statement
{ CurrentSemanticValue.Statement = new ASTFor(ValueStack[ValueStack.Depth-6].Statement, ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 23: // statement -> FOR, LPAREN, IDENTIFIER, IN, LBRACKET, expression, DOTDOT, 
               //              expression, RBRACKET, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTForIn(new ASTIdentifier(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-9].StartColumn), ValueStack[ValueStack.Depth-9].Token.Value), ValueStack[ValueStack.Depth-6].Expression, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 24: // statement -> IF, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTIfThen(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 25: // statement -> IF, LPAREN, expression, RPAREN, statement, ELSE, statement
{ CurrentSemanticValue.Statement = new ASTIfThenElse(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement); }
        break;
      case 26: // statement -> RETURN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTReturn(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 27: // statement -> error, SEMI
{ CurrentSemanticValue.Statement = new ASTNoop(); }
        break;
      case 28: // formals -> /* empty */
{ CurrentSemanticValue.FormalList = new ASTFormalList(); }
        break;
      case 29: // formals -> onePlusFormals
{ CurrentSemanticValue.FormalList = ValueStack[ValueStack.Depth-1].FormalList; }
        break;
      case 30: // onePlusFormals -> formal
{ CurrentSemanticValue.FormalList = new ASTFormalList(ValueStack[ValueStack.Depth-1].Formal, new ASTFormalList()); }
        break;
      case 31: // onePlusFormals -> formal, COMMA, onePlusFormals
{ CurrentSemanticValue.FormalList = new ASTFormalList(ValueStack[ValueStack.Depth-3].Formal, ValueStack[ValueStack.Depth-1].FormalList); }
        break;
      case 32: // formal -> type, IDENTIFIER
{ CurrentSemanticValue.Formal = new ASTFormal(ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 33: // expression -> expression, AND, expression
{ CurrentSemanticValue.Expression = new ASTAnd(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 34: // expression -> expression, OR, expression
{ CurrentSemanticValue.Expression = new ASTOr(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 35: // expression -> expression, SMALLER, expression
{ CurrentSemanticValue.Expression = new ASTSmaller(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 36: // expression -> expression, GREATER, expression
{ CurrentSemanticValue.Expression = new ASTGreater(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 37: // expression -> expression, SMEQ, expression
{ CurrentSemanticValue.Expression = new ASTSmallerEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 38: // expression -> expression, GTEQ, expression
{ CurrentSemanticValue.Expression = new ASTGreaterEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 39: // expression -> expression, EQ, expression
{ CurrentSemanticValue.Expression = new ASTEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 40: // expression -> expression, NEQ, expression
{ CurrentSemanticValue.Expression = new ASTNotEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 41: // expression -> expression, PLUS, expression
{ CurrentSemanticValue.Expression = new ASTAdd(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 42: // expression -> expression, MINUS, expression
{ CurrentSemanticValue.Expression = new ASTSubtract(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 43: // expression -> expression, TIMES, expression
{ CurrentSemanticValue.Expression = new ASTMultiply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 44: // expression -> expression, DIVIDE, expression
{ CurrentSemanticValue.Expression = new ASTDivide(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 45: // expression -> expression, MOD, expression
{ CurrentSemanticValue.Expression = new ASTModulo(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 46: // expression -> expression, EXP, expression
{ CurrentSemanticValue.Expression = new ASTExponent(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 47: // expression -> literal
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; }
        break;
      case 48: // expression -> MINUS, expression
{ CurrentSemanticValue.Expression = new ASTNegative(ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 49: // expression -> NOT, expression
{ CurrentSemanticValue.Expression = new ASTNot(ValueStack[ValueStack.Depth-1].Expression); }
        break;
      case 50: // expression -> expression, INCREMENT
{ CurrentSemanticValue.Expression = new ASTIncrement(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 51: // expression -> expression, DECREMENT
{ CurrentSemanticValue.Expression = new ASTDecrement(ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 52: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression; }
        break;
      case 53: // expression -> lvalue
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; }
        break;
      case 54: // expression -> NEW, IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInstantiateClass(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); }
        break;
      case 55: // expression -> NEW, type, LBRACKET, expression, DOTDOT, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTInstantiateArray(ValueStack[ValueStack.Depth-6].Type, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 56: // expression -> NEW, type, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTInstantiateArray(ValueStack[ValueStack.Depth-4].Type, ValueStack[ValueStack.Depth-2].Expression, new ASTInteger(0)); }
        break;
      case 57: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.Expression = new ASTIdentifier(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-1].StartColumn), ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 58: // lvalue -> IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInvoke(new ASTIdentifier(Location(CurrentLocationSpan.StartLine, LocationStack[LocationStack.Depth-4].StartColumn), "self"), ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); }
        break;
      case 59: // lvalue -> lvalue, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTDereferenceArray(ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); }
        break;
      case 60: // lvalue -> lvalue, DOT, IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInvoke(ValueStack[ValueStack.Depth-6].Expression, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); }
        break;
      case 61: // lvalue -> lvalue, DOT, IDENTIFIER
{ CurrentSemanticValue.Expression = new ASTDereferenceField(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 62: // lvalue -> SELF
{ CurrentSemanticValue.Expression = new ASTSelf(); }
        break;
      case 63: // lvalue -> BASE
{ CurrentSemanticValue.Expression = new ASTBase(); }
        break;
      case 64: // actuals -> /* empty */
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(); }
        break;
      case 65: // actuals -> onePlusActuals
{ CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-1].ExpressionList; }
        break;
      case 66: // onePlusActuals -> expression
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(ValueStack[ValueStack.Depth-1].Expression, new ASTExpressionList()); }
        break;
      case 67: // onePlusActuals -> expression, COMMA, onePlusActuals
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].ExpressionList); }
        break;
      case 68: // type -> integralType
{ CurrentSemanticValue.Type = ValueStack[ValueStack.Depth-1].Type; }
        break;
      case 69: // type -> integralType, PBRACKET
{ CurrentSemanticValue.Type = new ASTTypeArray(ValueStack[ValueStack.Depth-2].Type); }
        break;
      case 70: // integralType -> TINT
{ CurrentSemanticValue.Type = new ASTTypeInt(); }
        break;
      case 71: // integralType -> TBOOL
{ CurrentSemanticValue.Type = new ASTTypeBool(); }
        break;
      case 72: // integralType -> TVOID
{ CurrentSemanticValue.Type = new ASTTypeVoid(); }
        break;
      case 73: // integralType -> TSTRING
{ CurrentSemanticValue.Type = new ASTTypeString(); }
        break;
      case 74: // integralType -> TREAL
{ CurrentSemanticValue.Type = new ASTTypeReal(); }
        break;
      case 75: // integralType -> IDENTIFIER
{ CurrentSemanticValue.Type = new ASTTypeName(ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 76: // literal -> LITERAL_INT
{ CurrentSemanticValue.Expression = new ASTInteger(Int32.Parse(ValueStack[ValueStack.Depth-1].Token.Value)); }
        break;
      case 77: // literal -> LITERAL_REAL
{ CurrentSemanticValue.Expression = new ASTReal(Double.Parse(ValueStack[ValueStack.Depth-1].Token.Value)); }
        break;
      case 78: // literal -> LITERAL_STRING
{ CurrentSemanticValue.Expression = new ASTString(ValueStack[ValueStack.Depth-1].Token.Value); }
        break;
      case 79: // literal -> TRUE
{ CurrentSemanticValue.Expression = new ASTBoolean(true); }
        break;
      case 80: // literal -> FALSE
{ CurrentSemanticValue.Expression = new ASTBoolean(false); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public ASTStatementList SyntaxTreeRoot { get; set; }

public Parser(Scanner scan) : base(scan)
{
}

public SourceLocation Location(int line, int column) 
{ 
	return new SourceLocation(line, column, string.Empty);
}
}
}
