// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.0
// Machine:  MANDOS
// DateTime: 7/31/2010 12:11:59 PM
// UserName: Matt
// Input file <..\..\GeneratorInputFiles\CFlat.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LexicalAnalysis;
using AbstractSyntaxTree;
using CFlat;

namespace SyntaxAnalysis
{
internal enum Tokens {
    error=1,EOF=2,SEMI=3,RPAREN=4,LBRACE=5,RBRACE=6,
    RBRACKET=7,PBRACKET=8,DOT=9,DOTDOT=10,COMMA=11,IN=12,
    BASE=13,TINT=14,TREAL=15,TSTRING=16,TBOOL=17,TVOID=18,
    WHILE=19,FOR=20,IF=21,ELSE=22,SELF=23,CLASS=24,
    EXTENDS=25,NEW=26,RETURN=27,TRUE=28,FALSE=29,READONLY=30,
    NECESSARY=31,PRIVATE=32,PUBLIC=33,AMP=34,LITERAL_INT=35,LITERAL_REAL=36,
    LITERAL_STRING=37,IDENTIFIER=38,ASSIGN=39,OR=40,AND=41,INCREMENT=42,
    DECREMENT=43,EXP=44,SMALLER=45,GREATER=46,SMEQ=47,GTEQ=48,
    EQ=49,NEQ=50,PLUS=51,MINUS=52,TIMES=53,DIVIDE=54,
    MOD=55,UMINUS=56,LPAREN=57,NOT=58,LBRACKET=59};

// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<SemanticValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal class Parser: ShiftReduceParser<SemanticValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[94];
  private static State[] states = new State[200];
  private static string[] nonTerms = new string[] {
      "program", "classList", "statementList", "classDeclaration", "statement", 
      "declList", "decl", "formals", "onePlusFormals", "formal", "onePlusActuals", 
      "actuals", "expression", "rvalue", "literal", "lvalue", "type", "integralType", 
      "modifierList", "modifier", "formalModifier", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{24,6,1,198,2,-3},new int[]{-1,1,-2,3,-4,4});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{24,6,1,198,2,-3},new int[]{-2,5,-4,4});
    states[5] = new State(-4);
    states[6] = new State(new int[]{38,7});
    states[7] = new State(new int[]{5,8,25,193});
    states[8] = new State(new int[]{32,189,33,190,31,191,30,192,6,-8,38,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-6,9,-7,11,-19,13,-20,187});
    states[9] = new State(new int[]{6,10});
    states[10] = new State(-5);
    states[11] = new State(new int[]{32,189,33,190,31,191,30,192,6,-8,38,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-6,12,-7,11,-19,13,-20,187});
    states[12] = new State(-9);
    states[13] = new State(new int[]{38,180,14,107,17,108,18,109,16,110,15,111},new int[]{-17,14,-18,105});
    states[14] = new State(new int[]{38,15});
    states[15] = new State(new int[]{3,16,57,17});
    states[16] = new State(-10);
    states[17] = new State(new int[]{30,97,14,107,17,108,18,109,16,110,15,111,38,177,4,-35},new int[]{-8,18,-9,170,-10,171,-21,174,-17,178,-18,105});
    states[18] = new State(new int[]{4,19});
    states[19] = new State(new int[]{5,20});
    states[20] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159,6,-19},new int[]{-3,21,-5,23,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[21] = new State(new int[]{6,22});
    states[22] = new State(-11);
    states[23] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159,6,-19},new int[]{-3,24,-5,23,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[24] = new State(-20);
    states[25] = new State(-21);
    states[26] = new State(new int[]{3,27,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[27] = new State(-22);
    states[28] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,29,-15,60,-16,73,-14,87});
    states[29] = new State(new int[]{41,-42,40,-42,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,-42,34,56,42,-42,43,-42,3,-42,4,-42,7,-42,11,-42,10,-42});
    states[30] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,31,-15,60,-16,73,-14,87});
    states[31] = new State(new int[]{41,-43,40,-43,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,-43,34,56,42,-43,43,-43,3,-43,4,-43,7,-43,11,-43,10,-43});
    states[32] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,33,-15,60,-16,73,-14,87});
    states[33] = new State(new int[]{41,-44,40,-44,45,-44,46,-44,47,-44,48,-44,49,-44,50,-44,51,44,52,46,53,48,54,50,55,52,44,-44,34,56,42,-44,43,-44,3,-44,4,-44,7,-44,11,-44,10,-44});
    states[34] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,35,-15,60,-16,73,-14,87});
    states[35] = new State(new int[]{41,-45,40,-45,45,-45,46,-45,47,-45,48,-45,49,-45,50,-45,51,44,52,46,53,48,54,50,55,52,44,-45,34,56,42,-45,43,-45,3,-45,4,-45,7,-45,11,-45,10,-45});
    states[36] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,37,-15,60,-16,73,-14,87});
    states[37] = new State(new int[]{41,-46,40,-46,45,-46,46,-46,47,-46,48,-46,49,-46,50,-46,51,44,52,46,53,48,54,50,55,52,44,-46,34,56,42,-46,43,-46,3,-46,4,-46,7,-46,11,-46,10,-46});
    states[38] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,39,-15,60,-16,73,-14,87});
    states[39] = new State(new int[]{41,-47,40,-47,45,-47,46,-47,47,-47,48,-47,49,-47,50,-47,51,44,52,46,53,48,54,50,55,52,44,-47,34,56,42,-47,43,-47,3,-47,4,-47,7,-47,11,-47,10,-47});
    states[40] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,41,-15,60,-16,73,-14,87});
    states[41] = new State(new int[]{41,-48,40,-48,45,-48,46,-48,47,-48,48,-48,49,-48,50,-48,51,44,52,46,53,48,54,50,55,52,44,-48,34,56,42,-48,43,-48,3,-48,4,-48,7,-48,11,-48,10,-48});
    states[42] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,43,-15,60,-16,73,-14,87});
    states[43] = new State(new int[]{41,-49,40,-49,45,-49,46,-49,47,-49,48,-49,49,-49,50,-49,51,44,52,46,53,48,54,50,55,52,44,-49,34,56,42,-49,43,-49,3,-49,4,-49,7,-49,11,-49,10,-49});
    states[44] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,45,-15,60,-16,73,-14,87});
    states[45] = new State(-50);
    states[46] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,47,-15,60,-16,73,-14,87});
    states[47] = new State(-51);
    states[48] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,49,-15,60,-16,73,-14,87});
    states[49] = new State(-52);
    states[50] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,51,-15,60,-16,73,-14,87});
    states[51] = new State(-53);
    states[52] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,53,-15,60,-16,73,-14,87});
    states[53] = new State(-54);
    states[54] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,55,-15,60,-16,73,-14,87});
    states[55] = new State(new int[]{41,-55,40,-55,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,-55,34,56,42,-55,43,-55,3,-55,4,-55,7,-55,11,-55,10,-55});
    states[56] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,57,-15,60,-16,73,-14,87});
    states[57] = new State(-56);
    states[58] = new State(-60);
    states[59] = new State(-61);
    states[60] = new State(-57);
    states[61] = new State(-89);
    states[62] = new State(-90);
    states[63] = new State(-91);
    states[64] = new State(-92);
    states[65] = new State(-93);
    states[66] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,67,-15,60,-16,73,-14,87});
    states[67] = new State(-58);
    states[68] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,69,-15,60,-16,73,-14,87});
    states[69] = new State(-59);
    states[70] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,71,-15,60,-16,73,-14,87});
    states[71] = new State(new int[]{4,72,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[72] = new State(-62);
    states[73] = new State(new int[]{59,74,9,112,41,-63,40,-63,45,-63,46,-63,47,-63,48,-63,49,-63,50,-63,51,-63,52,-63,53,-63,54,-63,55,-63,44,-63,34,-63,42,-63,43,-63,3,-63,4,-63,7,-63,11,-63,10,-63});
    states[74] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,75,-15,60,-16,73,-14,87});
    states[75] = new State(new int[]{7,76,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[76] = new State(-69);
    states[77] = new State(new int[]{57,78,59,-68,9,-68,41,-68,40,-68,45,-68,46,-68,47,-68,48,-68,49,-68,50,-68,51,-68,52,-68,53,-68,54,-68,55,-68,44,-68,34,-68,42,-68,43,-68,3,-68,4,-68,7,-68,11,-68,10,-68});
    states[78] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88,30,97,4,-75},new int[]{-12,79,-11,81,-13,82,-15,60,-16,73,-14,87,-21,93});
    states[79] = new State(new int[]{4,80});
    states[80] = new State(-73);
    states[81] = new State(-76);
    states[82] = new State(new int[]{41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59,11,83,4,-77});
    states[83] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88,30,97},new int[]{-11,84,-13,82,-15,60,-16,73,-14,87,-21,93});
    states[84] = new State(-80);
    states[85] = new State(-71);
    states[86] = new State(-72);
    states[87] = new State(-64);
    states[88] = new State(new int[]{38,89,14,107,17,108,18,109,16,110,15,111},new int[]{-17,98,-18,105});
    states[89] = new State(new int[]{57,90,8,-88,59,-88});
    states[90] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88,30,97,4,-75},new int[]{-12,91,-11,81,-13,82,-15,60,-16,73,-14,87,-21,93});
    states[91] = new State(new int[]{4,92});
    states[92] = new State(-65);
    states[93] = new State(new int[]{38,94});
    states[94] = new State(new int[]{11,95,4,-78});
    states[95] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88,30,97},new int[]{-11,96,-13,82,-15,60,-16,73,-14,87,-21,93});
    states[96] = new State(-79);
    states[97] = new State(-39);
    states[98] = new State(new int[]{59,99});
    states[99] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,100,-15,60,-16,73,-14,87});
    states[100] = new State(new int[]{10,101,7,104,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[101] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,102,-15,60,-16,73,-14,87});
    states[102] = new State(new int[]{7,103,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[103] = new State(-66);
    states[104] = new State(-67);
    states[105] = new State(new int[]{8,106,38,-81,59,-81});
    states[106] = new State(-82);
    states[107] = new State(-83);
    states[108] = new State(-84);
    states[109] = new State(-85);
    states[110] = new State(-86);
    states[111] = new State(-87);
    states[112] = new State(new int[]{38,113});
    states[113] = new State(new int[]{57,114,59,-70,9,-70,39,-70,3,-70,41,-70,40,-70,45,-70,46,-70,47,-70,48,-70,49,-70,50,-70,51,-70,52,-70,53,-70,54,-70,55,-70,44,-70,34,-70,42,-70,43,-70,4,-70,7,-70,11,-70,10,-70});
    states[114] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88,30,97,4,-75},new int[]{-12,115,-11,81,-13,82,-15,60,-16,73,-14,87,-21,93});
    states[115] = new State(new int[]{4,116});
    states[116] = new State(-74);
    states[117] = new State(new int[]{59,74,9,112,39,118,3,-63,41,-63,40,-63,45,-63,46,-63,47,-63,48,-63,49,-63,50,-63,51,-63,52,-63,53,-63,54,-63,55,-63,44,-63,34,-63,42,-63,43,-63});
    states[118] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,119,-15,60,-16,73,-14,87});
    states[119] = new State(new int[]{3,120,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[120] = new State(-25);
    states[121] = new State(new int[]{57,78,59,-68,9,-68,39,-68,3,-68,41,-68,40,-68,45,-68,46,-68,47,-68,48,-68,49,-68,50,-68,51,-68,52,-68,53,-68,54,-68,55,-68,44,-68,34,-68,42,-68,43,-68,8,-88,38,-88});
    states[122] = new State(new int[]{38,123});
    states[123] = new State(new int[]{3,124,39,125});
    states[124] = new State(-23);
    states[125] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,126,-15,60,-16,73,-14,87});
    states[126] = new State(new int[]{3,127,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[127] = new State(-24);
    states[128] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159,6,-19},new int[]{-3,129,-5,23,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[129] = new State(new int[]{6,130});
    states[130] = new State(-26);
    states[131] = new State(new int[]{57,132});
    states[132] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,133,-15,60,-16,73,-14,87});
    states[133] = new State(new int[]{4,134,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[134] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159},new int[]{-5,135,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[135] = new State(-27);
    states[136] = new State(new int[]{57,137});
    states[137] = new State(new int[]{38,161,14,107,17,108,18,109,16,110,15,111},new int[]{-17,138,-18,105});
    states[138] = new State(new int[]{38,139});
    states[139] = new State(new int[]{39,140});
    states[140] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,141,-15,60,-16,73,-14,87});
    states[141] = new State(new int[]{3,142,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[142] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,143,-15,60,-16,73,-14,87});
    states[143] = new State(new int[]{3,144,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[144] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,145,-15,60,-16,73,-14,87});
    states[145] = new State(new int[]{4,146,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[146] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159},new int[]{-5,147,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[147] = new State(-28);
    states[148] = new State(new int[]{57,149});
    states[149] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,150,-15,60,-16,73,-14,87});
    states[150] = new State(new int[]{4,151,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[151] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159},new int[]{-5,152,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[152] = new State(new int[]{22,153,3,-30,35,-30,36,-30,37,-30,28,-30,29,-30,52,-30,58,-30,57,-30,38,-30,23,-30,13,-30,26,-30,14,-30,17,-30,18,-30,16,-30,15,-30,5,-30,19,-30,20,-30,21,-30,27,-30,1,-30,6,-30});
    states[153] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159},new int[]{-5,154,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[154] = new State(-31);
    states[155] = new State(new int[]{3,156,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,157,-15,60,-16,73,-14,87});
    states[156] = new State(-32);
    states[157] = new State(new int[]{3,158,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[158] = new State(-33);
    states[159] = new State(new int[]{3,160});
    states[160] = new State(-34);
    states[161] = new State(new int[]{12,162,8,-88,38,-88});
    states[162] = new State(new int[]{59,163});
    states[163] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,164,-15,60,-16,73,-14,87});
    states[164] = new State(new int[]{10,165,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[165] = new State(new int[]{35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,77,23,85,13,86,26,88},new int[]{-13,166,-15,60,-16,73,-14,87});
    states[166] = new State(new int[]{7,167,41,28,40,30,45,32,46,34,47,36,48,38,49,40,50,42,51,44,52,46,53,48,54,50,55,52,44,54,34,56,42,58,43,59});
    states[167] = new State(new int[]{4,168});
    states[168] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159},new int[]{-5,169,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[169] = new State(-29);
    states[170] = new State(-36);
    states[171] = new State(new int[]{11,172,4,-37});
    states[172] = new State(new int[]{30,97,14,107,17,108,18,109,16,110,15,111,38,177},new int[]{-9,173,-10,171,-21,174,-17,178,-18,105});
    states[173] = new State(-38);
    states[174] = new State(new int[]{14,107,17,108,18,109,16,110,15,111,38,177},new int[]{-17,175,-18,105});
    states[175] = new State(new int[]{38,176});
    states[176] = new State(-40);
    states[177] = new State(-88);
    states[178] = new State(new int[]{38,179});
    states[179] = new State(-41);
    states[180] = new State(new int[]{57,181,8,-88,38,-88});
    states[181] = new State(new int[]{30,97,14,107,17,108,18,109,16,110,15,111,38,177,4,-35},new int[]{-8,182,-9,170,-10,171,-21,174,-17,178,-18,105});
    states[182] = new State(new int[]{4,183});
    states[183] = new State(new int[]{5,184});
    states[184] = new State(new int[]{3,25,35,61,36,62,37,63,28,64,29,65,52,66,58,68,57,70,38,121,23,85,13,86,26,88,14,107,17,108,18,109,16,110,15,111,5,128,19,131,20,136,21,148,27,155,1,159,6,-19},new int[]{-3,185,-5,23,-13,26,-15,60,-16,117,-14,87,-17,122,-18,105});
    states[185] = new State(new int[]{6,186});
    states[186] = new State(-12);
    states[187] = new State(new int[]{32,189,33,190,31,191,30,192,38,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-19,188,-20,187});
    states[188] = new State(-14);
    states[189] = new State(-15);
    states[190] = new State(-16);
    states[191] = new State(-17);
    states[192] = new State(-18);
    states[193] = new State(new int[]{38,194});
    states[194] = new State(new int[]{5,195});
    states[195] = new State(new int[]{32,189,33,190,31,191,30,192,6,-8,38,-13,14,-13,17,-13,18,-13,16,-13,15,-13},new int[]{-6,196,-7,11,-19,13,-20,187});
    states[196] = new State(new int[]{6,197});
    states[197] = new State(-6);
    states[198] = new State(new int[]{3,199});
    states[199] = new State(-7);

    rules[1] = new Rule(-22, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2});
    rules[3] = new Rule(-2, new int[]{});
    rules[4] = new Rule(-2, new int[]{-4,-2});
    rules[5] = new Rule(-4, new int[]{24,38,5,-6,6});
    rules[6] = new Rule(-4, new int[]{24,38,25,38,5,-6,6});
    rules[7] = new Rule(-4, new int[]{1,3});
    rules[8] = new Rule(-6, new int[]{});
    rules[9] = new Rule(-6, new int[]{-7,-6});
    rules[10] = new Rule(-7, new int[]{-19,-17,38,3});
    rules[11] = new Rule(-7, new int[]{-19,-17,38,57,-8,4,5,-3,6});
    rules[12] = new Rule(-7, new int[]{-19,38,57,-8,4,5,-3,6});
    rules[13] = new Rule(-19, new int[]{});
    rules[14] = new Rule(-19, new int[]{-20,-19});
    rules[15] = new Rule(-20, new int[]{32});
    rules[16] = new Rule(-20, new int[]{33});
    rules[17] = new Rule(-20, new int[]{31});
    rules[18] = new Rule(-20, new int[]{30});
    rules[19] = new Rule(-3, new int[]{});
    rules[20] = new Rule(-3, new int[]{-5,-3});
    rules[21] = new Rule(-5, new int[]{3});
    rules[22] = new Rule(-5, new int[]{-13,3});
    rules[23] = new Rule(-5, new int[]{-17,38,3});
    rules[24] = new Rule(-5, new int[]{-17,38,39,-13,3});
    rules[25] = new Rule(-5, new int[]{-16,39,-13,3});
    rules[26] = new Rule(-5, new int[]{5,-3,6});
    rules[27] = new Rule(-5, new int[]{19,57,-13,4,-5});
    rules[28] = new Rule(-5, new int[]{20,57,-17,38,39,-13,3,-13,3,-13,4,-5});
    rules[29] = new Rule(-5, new int[]{20,57,38,12,59,-13,10,-13,7,4,-5});
    rules[30] = new Rule(-5, new int[]{21,57,-13,4,-5});
    rules[31] = new Rule(-5, new int[]{21,57,-13,4,-5,22,-5});
    rules[32] = new Rule(-5, new int[]{27,3});
    rules[33] = new Rule(-5, new int[]{27,-13,3});
    rules[34] = new Rule(-5, new int[]{1,3});
    rules[35] = new Rule(-8, new int[]{});
    rules[36] = new Rule(-8, new int[]{-9});
    rules[37] = new Rule(-9, new int[]{-10});
    rules[38] = new Rule(-9, new int[]{-10,11,-9});
    rules[39] = new Rule(-21, new int[]{30});
    rules[40] = new Rule(-10, new int[]{-21,-17,38});
    rules[41] = new Rule(-10, new int[]{-17,38});
    rules[42] = new Rule(-13, new int[]{-13,41,-13});
    rules[43] = new Rule(-13, new int[]{-13,40,-13});
    rules[44] = new Rule(-13, new int[]{-13,45,-13});
    rules[45] = new Rule(-13, new int[]{-13,46,-13});
    rules[46] = new Rule(-13, new int[]{-13,47,-13});
    rules[47] = new Rule(-13, new int[]{-13,48,-13});
    rules[48] = new Rule(-13, new int[]{-13,49,-13});
    rules[49] = new Rule(-13, new int[]{-13,50,-13});
    rules[50] = new Rule(-13, new int[]{-13,51,-13});
    rules[51] = new Rule(-13, new int[]{-13,52,-13});
    rules[52] = new Rule(-13, new int[]{-13,53,-13});
    rules[53] = new Rule(-13, new int[]{-13,54,-13});
    rules[54] = new Rule(-13, new int[]{-13,55,-13});
    rules[55] = new Rule(-13, new int[]{-13,44,-13});
    rules[56] = new Rule(-13, new int[]{-13,34,-13});
    rules[57] = new Rule(-13, new int[]{-15});
    rules[58] = new Rule(-13, new int[]{52,-13});
    rules[59] = new Rule(-13, new int[]{58,-13});
    rules[60] = new Rule(-13, new int[]{-13,42});
    rules[61] = new Rule(-13, new int[]{-13,43});
    rules[62] = new Rule(-13, new int[]{57,-13,4});
    rules[63] = new Rule(-13, new int[]{-16});
    rules[64] = new Rule(-13, new int[]{-14});
    rules[65] = new Rule(-13, new int[]{26,38,57,-12,4});
    rules[66] = new Rule(-13, new int[]{26,-17,59,-13,10,-13,7});
    rules[67] = new Rule(-13, new int[]{26,-17,59,-13,7});
    rules[68] = new Rule(-16, new int[]{38});
    rules[69] = new Rule(-16, new int[]{-16,59,-13,7});
    rules[70] = new Rule(-16, new int[]{-16,9,38});
    rules[71] = new Rule(-16, new int[]{23});
    rules[72] = new Rule(-16, new int[]{13});
    rules[73] = new Rule(-14, new int[]{38,57,-12,4});
    rules[74] = new Rule(-14, new int[]{-16,9,38,57,-12,4});
    rules[75] = new Rule(-12, new int[]{});
    rules[76] = new Rule(-12, new int[]{-11});
    rules[77] = new Rule(-11, new int[]{-13});
    rules[78] = new Rule(-11, new int[]{-21,38});
    rules[79] = new Rule(-11, new int[]{-21,38,11,-11});
    rules[80] = new Rule(-11, new int[]{-13,11,-11});
    rules[81] = new Rule(-17, new int[]{-18});
    rules[82] = new Rule(-17, new int[]{-18,8});
    rules[83] = new Rule(-18, new int[]{14});
    rules[84] = new Rule(-18, new int[]{17});
    rules[85] = new Rule(-18, new int[]{18});
    rules[86] = new Rule(-18, new int[]{16});
    rules[87] = new Rule(-18, new int[]{15});
    rules[88] = new Rule(-18, new int[]{38});
    rules[89] = new Rule(-15, new int[]{35});
    rules[90] = new Rule(-15, new int[]{36});
    rules[91] = new Rule(-15, new int[]{37});
    rules[92] = new Rule(-15, new int[]{28});
    rules[93] = new Rule(-15, new int[]{29});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> classList
{ SyntaxTreeRoot = CurrentSemanticValue.StatementList; CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 3: // classList -> /* empty */
{ CurrentSemanticValue.StatementList = new ASTStatementList(); CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 4: // classList -> classDeclaration, classList
{ CurrentSemanticValue.StatementList = new ASTStatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 5: // classDeclaration -> CLASS, IDENTIFIER, LBRACE, declList, RBRACE
{ CurrentSemanticValue.Statement = new ASTClassDefinition(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].DeclarationList); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 6: // classDeclaration -> CLASS, IDENTIFIER, EXTENDS, IDENTIFIER, LBRACE, declList, 
              //                     RBRACE
{ CurrentSemanticValue.Statement = new ASTSubClassDefinition(ValueStack[ValueStack.Depth-6].Token.Value, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].DeclarationList); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 8: // declList -> /* empty */
{ CurrentSemanticValue.DeclarationList = new ASTDeclarationList(); CurrentSemanticValue.DeclarationList.Location = CurrentLocationSpan; }
        break;
      case 9: // declList -> decl, declList
{ CurrentSemanticValue.DeclarationList = new ASTDeclarationList(ValueStack[ValueStack.Depth-2].Declaration, ValueStack[ValueStack.Depth-1].DeclarationList); CurrentSemanticValue.DeclarationList.Location = CurrentLocationSpan; }
        break;
      case 10: // decl -> modifierList, type, IDENTIFIER, SEMI
{ CurrentSemanticValue.Declaration = new ASTDeclarationField(ValueStack[ValueStack.Depth-4].ModifierList, ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Token.Value); CurrentSemanticValue.Declaration.Location = CurrentLocationSpan; }
        break;
      case 11: // decl -> modifierList, type, IDENTIFIER, LPAREN, formals, RPAREN, LBRACE, 
               //         statementList, RBRACE
{ CurrentSemanticValue.Declaration = new ASTDeclarationMethod(ValueStack[ValueStack.Depth-9].ModifierList, ValueStack[ValueStack.Depth-8].Type, ValueStack[ValueStack.Depth-7].Token.Value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Declaration.Location = CurrentLocationSpan; }
        break;
      case 12: // decl -> modifierList, IDENTIFIER, LPAREN, formals, RPAREN, LBRACE, 
               //         statementList, RBRACE
{ CurrentSemanticValue.Declaration = new ASTDeclarationCtor(ValueStack[ValueStack.Depth-8].ModifierList, ValueStack[ValueStack.Depth-7].Token.Value, ValueStack[ValueStack.Depth-5].FormalList, ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Declaration.Location = CurrentLocationSpan; }
        break;
      case 13: // modifierList -> /* empty */
{ CurrentSemanticValue.ModifierList = new ASTModifierList(); CurrentSemanticValue.ModifierList.Location = CurrentLocationSpan; }
        break;
      case 14: // modifierList -> modifier, modifierList
{ CurrentSemanticValue.ModifierList = new ASTModifierList(ValueStack[ValueStack.Depth-2].Token.Value, ValueStack[ValueStack.Depth-1].ModifierList); CurrentSemanticValue.ModifierList.Location = CurrentLocationSpan; }
        break;
      case 19: // statementList -> /* empty */
{ CurrentSemanticValue.StatementList = new ASTStatementList(); CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 20: // statementList -> statement, statementList
{ CurrentSemanticValue.StatementList = new ASTStatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 22: // statement -> expression, SEMI
{ CurrentSemanticValue.Statement = new ASTStatementExpr(ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 23: // statement -> type, IDENTIFIER, SEMI
{ CurrentSemanticValue.Statement = new ASTDeclarationLocal(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Type, ValueStack[ValueStack.Depth-2].Token.Value); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 24: // statement -> type, IDENTIFIER, ASSIGN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTDeclarationLocal(CurrentLocationSpan, ValueStack[ValueStack.Depth-5].Type, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 25: // statement -> lvalue, ASSIGN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTAssign(ValueStack[ValueStack.Depth-4].LValue, ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 26: // statement -> LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Statement = new ASTBlock(ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 27: // statement -> WHILE, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTWhile(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 28: // statement -> FOR, LPAREN, type, IDENTIFIER, ASSIGN, expression, SEMI, 
               //              expression, SEMI, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTFor(new ASTDeclarationLocal(CurrentLocationSpan, ValueStack[ValueStack.Depth-10].Type, ValueStack[ValueStack.Depth-9].Token.Value, ValueStack[ValueStack.Depth-7].Expression), ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 29: // statement -> FOR, LPAREN, IDENTIFIER, IN, LBRACKET, expression, DOTDOT, 
               //              expression, RBRACKET, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTForIn(new ASTIdentifier(CurrentLocationSpan, ValueStack[ValueStack.Depth-9].Token.Value), ValueStack[ValueStack.Depth-6].Expression, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 30: // statement -> IF, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new ASTIfThen(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 31: // statement -> IF, LPAREN, expression, RPAREN, statement, ELSE, statement
{ CurrentSemanticValue.Statement = new ASTIfThenElse(ValueStack[ValueStack.Depth-5].Expression, ValueStack[ValueStack.Depth-3].Statement, ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 32: // statement -> RETURN, SEMI
{ CurrentSemanticValue.Statement = new ASTReturn(new ASTVoidExpression()); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 33: // statement -> RETURN, expression, SEMI
{ CurrentSemanticValue.Statement = new ASTReturn(ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 34: // statement -> error, SEMI
{ CurrentSemanticValue.Statement = new ASTNoop(); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 35: // formals -> /* empty */
{ CurrentSemanticValue.FormalList = new ASTFormalList(); CurrentSemanticValue.FormalList.Location = CurrentLocationSpan; }
        break;
      case 36: // formals -> onePlusFormals
{ CurrentSemanticValue.FormalList = ValueStack[ValueStack.Depth-1].FormalList; CurrentSemanticValue.FormalList.Location = CurrentLocationSpan; }
        break;
      case 37: // onePlusFormals -> formal
{ CurrentSemanticValue.FormalList = new ASTFormalList(ValueStack[ValueStack.Depth-1].Formal, new ASTFormalList()); CurrentSemanticValue.FormalList.Location = CurrentLocationSpan; }
        break;
      case 38: // onePlusFormals -> formal, COMMA, onePlusFormals
{ CurrentSemanticValue.FormalList = new ASTFormalList(ValueStack[ValueStack.Depth-3].Formal, ValueStack[ValueStack.Depth-1].FormalList); CurrentSemanticValue.FormalList.Location = CurrentLocationSpan; }
        break;
      case 40: // formal -> formalModifier, type, IDENTIFIER
{ CurrentSemanticValue.Formal = new ASTFormal(ValueStack[ValueStack.Depth-3].Token.Value, ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.Formal.Location = CurrentLocationSpan; }
        break;
      case 41: // formal -> type, IDENTIFIER
{ CurrentSemanticValue.Formal = new ASTFormal(ValueStack[ValueStack.Depth-2].Type, ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.Formal.Location = CurrentLocationSpan; }
        break;
      case 42: // expression -> expression, AND, expression
{ CurrentSemanticValue.Expression = new ASTAnd(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 43: // expression -> expression, OR, expression
{ CurrentSemanticValue.Expression = new ASTOr(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 44: // expression -> expression, SMALLER, expression
{ CurrentSemanticValue.Expression = new ASTSmaller(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 45: // expression -> expression, GREATER, expression
{ CurrentSemanticValue.Expression = new ASTGreater(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 46: // expression -> expression, SMEQ, expression
{ CurrentSemanticValue.Expression = new ASTSmallerEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 47: // expression -> expression, GTEQ, expression
{ CurrentSemanticValue.Expression = new ASTGreaterEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 48: // expression -> expression, EQ, expression
{ CurrentSemanticValue.Expression = new ASTEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 49: // expression -> expression, NEQ, expression
{ CurrentSemanticValue.Expression = new ASTNotEqual(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 50: // expression -> expression, PLUS, expression
{ CurrentSemanticValue.Expression = new ASTAdd(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 51: // expression -> expression, MINUS, expression
{ CurrentSemanticValue.Expression = new ASTSubtract(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 52: // expression -> expression, TIMES, expression
{ CurrentSemanticValue.Expression = new ASTMultiply(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 53: // expression -> expression, DIVIDE, expression
{ CurrentSemanticValue.Expression = new ASTDivide(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 54: // expression -> expression, MOD, expression
{ CurrentSemanticValue.Expression = new ASTModulo(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 55: // expression -> expression, EXP, expression
{ CurrentSemanticValue.Expression = new ASTExponent(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 56: // expression -> expression, AMP, expression
{ CurrentSemanticValue.Expression = new ASTConcatenate(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 57: // expression -> literal
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 58: // expression -> MINUS, expression
{ CurrentSemanticValue.Expression = new ASTNegative(ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 59: // expression -> NOT, expression
{ CurrentSemanticValue.Expression = new ASTNot(ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 60: // expression -> expression, INCREMENT
{ CurrentSemanticValue.Expression = new ASTIncrement(ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 61: // expression -> expression, DECREMENT
{ CurrentSemanticValue.Expression = new ASTDecrement(ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 62: // expression -> LPAREN, expression, RPAREN
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-2].Expression; CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 63: // expression -> lvalue
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].LValue; CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 64: // expression -> rvalue
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 65: // expression -> NEW, IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInstantiateClass(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 66: // expression -> NEW, type, LBRACKET, expression, DOTDOT, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTInstantiateArray(ValueStack[ValueStack.Depth-6].Type, ValueStack[ValueStack.Depth-4].Expression, ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 67: // expression -> NEW, type, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.Expression = new ASTInstantiateArray(ValueStack[ValueStack.Depth-4].Type, ValueStack[ValueStack.Depth-2].Expression, new ASTInteger(0)); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 68: // lvalue -> IDENTIFIER
{ CurrentSemanticValue.LValue = new ASTIdentifier(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.LValue.Location = CurrentLocationSpan; }
        break;
      case 69: // lvalue -> lvalue, LBRACKET, expression, RBRACKET
{ CurrentSemanticValue.LValue = new ASTDereferenceArray(ValueStack[ValueStack.Depth-4].LValue, ValueStack[ValueStack.Depth-2].Expression); CurrentSemanticValue.LValue.Location = CurrentLocationSpan; }
        break;
      case 70: // lvalue -> lvalue, DOT, IDENTIFIER
{ CurrentSemanticValue.LValue = new ASTDereferenceField(ValueStack[ValueStack.Depth-3].LValue, ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.LValue.Location = CurrentLocationSpan; }
        break;
      case 71: // lvalue -> SELF
{ CurrentSemanticValue.LValue = new ASTSelf(); CurrentSemanticValue.LValue.Location = CurrentLocationSpan; }
        break;
      case 72: // lvalue -> BASE
{ CurrentSemanticValue.LValue = new ASTBase(); CurrentSemanticValue.LValue.Location = CurrentLocationSpan; }
        break;
      case 73: // rvalue -> IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInvoke(new ASTSelf(), ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 74: // rvalue -> lvalue, DOT, IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new ASTInvoke(ValueStack[ValueStack.Depth-6].LValue, ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 75: // actuals -> /* empty */
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 76: // actuals -> onePlusActuals
{ CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-1].ExpressionList; CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 77: // onePlusActuals -> expression
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(ValueStack[ValueStack.Depth-1].Expression, new ASTExpressionList()); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 78: // onePlusActuals -> formalModifier, IDENTIFIER
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(new ASTIdentifier(CurrentLocationSpan, ValueStack[ValueStack.Depth-1].Token.Value, ValueStack[ValueStack.Depth-2].Token.Value), new ASTExpressionList()); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 79: // onePlusActuals -> formalModifier, IDENTIFIER, COMMA, onePlusActuals
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(new ASTIdentifier(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Token.Value, ValueStack[ValueStack.Depth-4].Token.Value), ValueStack[ValueStack.Depth-1].ExpressionList); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 80: // onePlusActuals -> expression, COMMA, onePlusActuals
{ CurrentSemanticValue.ExpressionList = new ASTExpressionList(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].ExpressionList); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 81: // type -> integralType
{ CurrentSemanticValue.Type = ValueStack[ValueStack.Depth-1].Type; CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 82: // type -> integralType, PBRACKET
{ CurrentSemanticValue.Type = new ASTTypeArray(ValueStack[ValueStack.Depth-2].Type); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 83: // integralType -> TINT
{ CurrentSemanticValue.Type = new ASTTypeInt(); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 84: // integralType -> TBOOL
{ CurrentSemanticValue.Type = new ASTTypeBool(); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 85: // integralType -> TVOID
{ CurrentSemanticValue.Type = new ASTTypeVoid(); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 86: // integralType -> TSTRING
{ CurrentSemanticValue.Type = new ASTTypeString(); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 87: // integralType -> TREAL
{ CurrentSemanticValue.Type = new ASTTypeReal(); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 88: // integralType -> IDENTIFIER
{ CurrentSemanticValue.Type = new ASTTypeClass(ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.Type.Location = CurrentLocationSpan; }
        break;
      case 89: // literal -> LITERAL_INT
{ CurrentSemanticValue.Expression = new ASTInteger(Int32.Parse(ValueStack[ValueStack.Depth-1].Token.Value)); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 90: // literal -> LITERAL_REAL
{ CurrentSemanticValue.Expression = new ASTReal(Double.Parse(ValueStack[ValueStack.Depth-1].Token.Value)); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 91: // literal -> LITERAL_STRING
{ CurrentSemanticValue.Expression = new ASTString(ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 92: // literal -> TRUE
{ CurrentSemanticValue.Expression = new ASTBoolean(true); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 93: // literal -> FALSE
{ CurrentSemanticValue.Expression = new ASTBoolean(false); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public ASTStatementList SyntaxTreeRoot { get; set; }

public Parser(Scanner scan) : base(scan)
{
}
}
}
