class Cell
{
	char value;
	Cell left;
	Cell right;

	Cell(char c)
	{
		value = c;
	}

	bool HasLeft()
	{
		return isnull(left) == false;
	}

	bool HasRight()
	{
		return isnull(right) == false;
	}
}

class Tape
{
	Cell head;
	Cell current;
	char blank;

	Tape(char b)
	{
		head = new Cell(b);
		current = head;
		blank = b;
	}

	void MoveLeft()
	{
		if (current.HasLeft())
		{
			current = current.left;
		}
		else
		{
			Cell temp = new Cell(blank);
			current.left = temp;
			current = temp;
		}
	}

	void MoveRight()
	{
		if (current.HasRight())
		{
			current = current.right;
		}
		else
		{
			Cell temp = new Cell(blank);
			current.right = temp;
			current = temp;
		}
	}

	void Write(char c)
	{
		current.value = c;
	}

	void Init(string contents)
	{
		int length = slen(contents);
		for (int i = 0; i < length; i++)
		{
			char c = charAt(contents, i);
			Write(c);
			MoveRight();
		}
		/* reset the tape to the beginning */
		current = head;
	}

	/* Prints out the tape contents from left most to right. */
	void Debug()
	{
		int cellNumber = 0;
		Cell temp = head;
		bool done = false;

		/* find the left-most cell */
		while (done == false)
		{
			if (temp.HasLeft())
			{
				cellNumber--;
				temp = temp.left;
			}
			else
			{
				done = true;
			}
		}

		/* loop through all cells again */
		done = false;
		while (done == false)
		{
			println(cellNumber & ": " & temp.value);
			if (temp.HasRight())
			{
				cellNumber++;
				temp = temp.right;
			}
			else
			{
				done = true;
			}
		}
	}
}

class Transition
{
	int currentState;
	char currentSymbol;
	int targetState;
	char targetSymbol;
	char action;
	
	Transition(int cState, char cSymbol, int tState, char tSymbol, char a)
	{
		currentState = cState;
		currentSymbol = cSymbol;
		targetState = tState;
		targetSymbol = tSymbol;
		action = a;
	}

	void Debug()
	{
		println("(" & currentState & "," & currentSymbol & ") -> (" & targetState & "," & targetSymbol & ") " & action);
	}
}

class TransitionParser
{
	char LPAREN;
	char RPAREN;
	char SPACE;
	char COMMA;
	char HYPHEN;
	char GT;
	int index;
	string line;
	char[] actions;
	int maxIndex;

	TransitionParser(string l, char[] a)
	{
		LPAREN = '\u0028';
		RPAREN = '\u0029';
		SPACE = '\u0020';
		COMMA = '\u002c';
		HYPHEN = '\u002d';
		GT = '\u003e';
		line = l;
		actions = a;
		maxIndex = slen(line) - 1;
	}

	/* Parses a line of the form: (state,symbol) -> (state,symbol) action */
	Transition Parse()
	{
		Consume(LPAREN);
		string currState = ReadUntil(COMMA);
		Consume(COMMA);
		char currSymbol = Take();
		/* There's no real need for the extra symbols here, other than human readability. */
		Consume(RPAREN);
		Consume(SPACE);
		Consume(HYPHEN);
		Consume(GT);
		Consume(SPACE);
		Consume(LPAREN);
		string targetState = ReadUntil(COMMA);
		Consume(COMMA);
		char targetSymbol = Take();
		Consume(RPAREN);
		Consume(SPACE);
		char action = Take();

		/* Make sure the action is valid */
		if (!IsValidAction(action))
		{
			die("Invalid transition action. Got: " & action);
		}

		/* We have the primitives to make a transition, so return it! */
		Transition t = new Transition(parseInt(currState), currSymbol, parseInt(targetState), targetSymbol, action);
		return t;
	}

	/* Advances the index if the current character matches the input */
	void Consume(char c)
	{
		char current = Take();
		if (current == c)
		{
			index++;
		}
		else
		{
			die("Invalid transition. Expected: " & c & " Got: " & current);
		}
	}

	/* Checks string bounds, and returns the current character and advances the index if everything's ok. Otherwise, this will exit the application. */
	char Take()
	{
		if (index > maxIndex)
		{
			die("Invalid transition. Unexpected end of line.");
		}
		char result = charAt(line, index);
		index++;
		return result;
	}

	/* Concats a string of the characters and stops at the given symbol */
	string ReadUntil(char stop)
	{
		string result = "";
		char current = Take();
		while (current != stop)
		{
			result = result & current;
			index++;
			current = Take();
		}
		return result;
	}

	/* Makes sure the action matches the set of valid actions passed in */
	bool IsValidAction(char a)
	{
		int l = alen(actions);
		for (int i = 0; i < l; i++)
		{
			if (actions[i] == a)
			{
				return true;
			}
		}
		return false;
	}
}

class Machine
{
	Tape tape;
	int initial; /* initial state number */
	int final; /* accepting state number */
	char[] tapeAlphabet;
	char[] inputAlphabet;
	char blank;
	int stateCount;
	/* all of the transitions in the machine */
	Transition[] transitions;

	/* Characters that correspond to the actions in a transition */
	char LEFT;
	char RIGHT;
	char HALT;
	char COMMENT;

	Machine(string filePath)
	{
		/* Set the characters for L, R, and H */
		LEFT = '\u004c';
		RIGHT = '\u0052';
		HALT = '\u0048';
		COMMENT = '\u0023';

		/* Parse the input file */
		Parse(filePath);

		/* more initialization */
		tape = new Tape(blank);
	}

	void Parse(string filePath)
	{
		string[] lines = readFile(filePath);
		int totalLines = alen(lines);
		int lineIndex = 0;
		for (int i = 0; i < totalLines; i++)
		{
			/* check for a comment in the input file */
			string currentLine = lines[i];
			char first = charAt(currentLine, 0);
			if (first != COMMENT)
			{
				/* process each line of the file */
				HandleLine(currentLine, lineIndex);
				lineIndex++;
			}
		}
		int transitionCount = lineIndex - 6;
		/* loop through the lines again, after we have the number of transitions (it's needed to initialize the array) */
		ReadTransitions(lines, transitionCount, totalLines);
	}

	void ReadTransitions(string[] lines, int transitionCount, int totalLines)
	{
		transitions = new Transition[transitionCount];
		/* build a set of characters for the Transition parser */
		char[] validActions = new char[3];
		validActions[0] = LEFT;
		validActions[1] = RIGHT;
		validActions[2] = HALT;
		/* loop through the text file again */
		int lineIndex = 0;
		int transitionIndex = 0;
		for (int i = 0; i < totalLines; i++)
		{
			/* exclude comments */
			string currentLine = lines[i];
			if (lineIndex > 5)
			{
				HandleTransition(currentLine, transitionIndex, validActions);
				transitionIndex++;
			}
			char first = charAt(currentLine, 0);
			if (first != COMMENT)
			{
				lineIndex++;
			}
		}
	}

	void HandleTransition(string line, int index, char[] validActions)
	{
		TransitionParser parser = new TransitionParser(line, validActions);
		transitions[index] = parser.Parse();
	}

	void HandleLine(string line, int index)
	{
		/*println(index & ": " & line);*/
		if (index == 0)
		{
			/* the number of states in the machine */
			stateCount = parseInt(line);
		}
		else if (index == 1)
		{
			/* the tape alphabet */
			tapeAlphabet = ToCharArray(line);
		}
		else if (index == 2)
		{
			/* the blank symbol */
			blank = charAt(line, 0);
		}
		else if (index == 3)
		{
			/* the input alphabet */
			inputAlphabet = ToCharArray(line);
		}
		else if (index == 4)
		{
			/* initial state */
			initial = parseInt(line);
			if (initial >= stateCount)
			{
				die("Input state is not valid. States are zero based, and must be less than the total number of states - 1.");
			}
		}
		else if (index == 5)
		{
			/* accepting state */
			final = parseInt(line);
			if (final >= stateCount)
			{
				die("Final state is not valid. States are zero based, and must be less than the total number of states - 1.");
			}
		}
	}

	char[] ToCharArray(string source)
	{
		int l = slen(source);
		char[] result = new char[l];
		for (int i = 0; i < l; i++)
		{
			result[i] = charAt(source, i);
		}
		return result;
	}

	void PrintCharArray(char[] a)
	{
		string s = "";
		int l = alen(a);
		for (int i = 0; i < l; i++)
		{
			s = s & a[i];
		}
		println(s);
	}

	void Run(string input)
	{
		
	}

	void Debug()
	{
		println("Number of states: " & stateCount);
		println("Tape Alphabet:");
		PrintCharArray(tapeAlphabet);
		println("Blank character: " & blank);
		println("Input Alphabet:");
		PrintCharArray(inputAlphabet);
		println("Initial state: " & initial);
		println("Final state: " & final);
		println("Tape Contents:");
		tape.Debug();
	}
}	

class program
{
	void main(string[] args)
	{
		/* command line input should be [file path] [turing machine input] */
		int argLength = alen(args);
		if (argLength != 2)
		{
			die("Usage: turingmachine.exe [file path] [input]");
		}

		Machine tm = new Machine(args[0]);
		/*tm.Debug();*/
		tm.Run(args[1]);


		/*Tape t = new Tape('\u005f');
		t.Init("Will loves Cindy!!");
		t.Debug();*/

		/*string input = args[0];
		println("Input file: " & input);

		Cell c = new Cell('\u005f');
		println("Cell's value is: " & c.value);

		Cell right = new Cell('\u0061');
		c.right = right;

		if (c.HasRight())
		{
			println("correct");
		}
		else
		{
			println("incorrect");
		}

		println("c.right.value = " & c.right.value);*/
	}
}